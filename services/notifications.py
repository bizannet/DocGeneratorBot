import logging
from datetime import datetime
from config import config
from aiogram import Bot

logger = logging.getLogger('doc_bot.notifications')


async def notify_support_about_new_order(
    bot: Bot,
    order_id: int,
    user_id: int,
    cart_items: list,
    total_price: float,
    discounted_price: float,
    promocode: str = None
):
    if not config.SUPPORT_CHAT_ID:
        logger.error("SUPPORT_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return

    order_details = f"–ó–∞–∫–∞–∑ #{order_id}\n"
    order_details += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
    order_details += f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
    order_details += "–î–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∑–∞–∫–∞–∑–µ:\n"

    for item in cart_items:
        doc_type = "–∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è" if item.get('price_type') == 'autogen' else "—à–∞–±–ª–æ–Ω"
        order_details += f"- {item['doc_name']} ({doc_type}) - {item['price']} ‚ÇΩ\n"

    if promocode:
        discount_pct = ((total_price - discounted_price) / total_price * 100) if total_price > 0 else 100
        order_details += f"\n–ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥: {promocode}\n"
        order_details += f"–°–∫–∏–¥–∫–∞: {discount_pct:.0f}%\n"
        order_details += f"–≠–∫–æ–Ω–æ–º–∏—è: {total_price - discounted_price:.2f} ‚ÇΩ\n"

    order_details += f"\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {discounted_price:.2f} ‚ÇΩ"
    if promocode:
        order_details += f" (—Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ {total_price - discounted_price:.2f} ‚ÇΩ)"
    order_details += f"\n–û–ø–ª–∞—á–µ–Ω–æ: {total_price:.2f} ‚ÇΩ"

    message = "üõí <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n" + order_details

    try:
        await bot.send_message(
            chat_id=config.SUPPORT_CHAT_ID,
            text=message,
            parse_mode="HTML"
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ {order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {config.SUPPORT_CHAT_ID}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ: {e}")


async def notify_support_about_support_request(bot: Bot, user_id: int, message_text: str):
    if not config.SUPPORT_CHAT_ID:
        logger.error("SUPPORT_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    reply_id = f"reply_{user_id}_{int(datetime.now().timestamp())}"
    text = (
        f"üÜò <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>\n\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n<i>{message_text}</i>"
    )

    try:
        await bot.send_message(
            chat_id=config.SUPPORT_CHAT_ID,
            text=text,
            parse_mode="HTML"
        )
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")


async def send_daily_stats_report(bot: Bot):
    from database.orders import get_daily_stats

    if not config.SUPPORT_CHAT_ID:
        return

    stats = get_daily_stats()
    message = (
        f"üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {datetime.now().strftime('%d.%m.%Y')}</b>\n\n"
        f"üõí –ó–∞–∫–∞–∑—ã: <b>{stats['orders_count']}</b>\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: <b>{stats['total_amount']} ‚ÇΩ</b>\n"
        f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: <b>{stats['unique_users']}</b>\n"
        f"üè∑ –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤: <b>{stats['promocodes_used']}</b>\n"
        f"üìÑ –®–∞–±–ª–æ–Ω–æ–≤: <b>{stats['templates_used']}</b>"
    )

    try:
        await bot.send_message(chat_id=config.SUPPORT_CHAT_ID, text=message, parse_mode="HTML")
        logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


async def send_monthly_stats_report(bot: Bot):
    from database.orders import get_monthly_stats

    if not config.SUPPORT_CHAT_ID:
        return

    stats = get_monthly_stats()
    message = (
        f"üìà <b>–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {datetime.now().strftime('%B %Y')}</b>\n\n"
        f"üõí –ó–∞–∫–∞–∑—ã: <b>{stats['orders_count']}</b>\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: <b>{stats['total_amount']} ‚ÇΩ</b>\n"
        f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: <b>{stats['unique_users']}</b>\n"
        f"üè∑ –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤: <b>{stats['promocodes_used']}</b>\n"
        f"üìÑ –®–∞–±–ª–æ–Ω–æ–≤: <b>{stats['templates_used']}</b>\n"
        f"üí∏ –≠–∫–æ–Ω–æ–º–∏—è: <b>{stats['total_savings']} ‚ÇΩ</b>"
    )

    try:
        await bot.send_message(chat_id=config.SUPPORT_CHAT_ID, text=message, parse_mode="HTML")
        logger.info("–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


async def send_yearly_stats_report(bot: Bot):
    from database.orders import get_yearly_stats

    if not config.SUPPORT_CHAT_ID:
        return

    stats = get_yearly_stats()
    message = (
        f"üåç <b>–ì–æ–¥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {datetime.now().strftime('%Y')}</b>\n\n"
        f"üõí –ó–∞–∫–∞–∑—ã: <b>{stats['orders_count']}</b>\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: <b>{stats['total_amount']} ‚ÇΩ</b>\n"
        f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: <b>{stats['unique_users']}</b>\n"
        f"üè∑ –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤: <b>{stats['promocodes_used']}</b>\n"
        f"üìÑ –®–∞–±–ª–æ–Ω–æ–≤: <b>{stats['templates_used']}</b>\n"
        f"üí∏ –≠–∫–æ–Ω–æ–º–∏—è: <b>{stats['total_savings']} ‚ÇΩ</b>\n\n"
        f"üìà <b>–†–æ—Å—Ç –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª—ã–º –≥–æ–¥–æ–º:</b>\n"
        f"‚Ä¢ –ó–∞–∫–∞–∑—ã: {stats['growth_orders']}%\n"
        f"‚Ä¢ –í—ã—Ä—É—á–∫–∞: {stats['growth_revenue']}%"
    )

    try:
        await bot.send_message(chat_id=config.SUPPORT_CHAT_ID, text=message, parse_mode="HTML")
        logger.info("–ì–æ–¥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–¥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


async def notify_support_about_new_promocode(bot: Bot, promocode_code: str, discount: int):
    month_abbr = promocode_code[:3].upper()
    months = {
        "JAN": "—è–Ω–≤–∞—Ä—è", "FEB": "—Ñ–µ–≤—Ä–∞–ª—è", "MAR": "–º–∞—Ä—Ç–∞", "APR": "–∞–ø—Ä–µ–ª—è",
        "MAY": "–º–∞—è", "JUN": "–∏—é–Ω—è", "JUL": "–∏—é–ª—è", "AUG": "–∞–≤–≥—É—Å—Ç–∞",
        "SEP": "—Å–µ–Ω—Ç—è–±—Ä—è", "OCT": "–æ–∫—Ç—è–±—Ä—è", "NOV": "–Ω–æ—è–±—Ä—è", "DEC": "–¥–µ–∫–∞–±—Ä—è"
    }
    month_name = months.get(month_abbr, "–º–µ—Å—è—Ü–∞")

    message = (
        f"üéâ <b>–ù–æ–≤—ã–π —Å–µ–∑–æ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!</b>\n\n"
        f"–° {month_name} –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: <code>{promocode_code}</code>\n"
        f"–°–∫–∏–¥–∫–∞: {discount}%\n\n"
        f"–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 1 —á–∏—Å–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞.\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫—Ü–∏–π."
    )

    try:
        await bot.send_message(chat_id=config.SUPPORT_CHAT_ID, text=message, parse_mode="HTML")
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ {promocode_code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ: {e}")


async def send_newsletter_to_all(bot: Bot, message_text: str) -> dict:
    from database.users import get_all_users

    users = get_all_users()
    sent_count = 0
    failed_count = 0

    for user in users:
        try:
            await bot.send_message(
                chat_id=user['id'],
                text=message_text,
                parse_mode="HTML"
            )
            sent_count += 1
        except Exception as e:
            failed_count += 1
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['id']}: {e}")

    result = {
        'sent': sent_count,
        'failed': failed_count,
        'total': len(users)
    }
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent_count} —É—Å–ø–µ—à–Ω–æ, {failed_count} –æ—à–∏–±–æ–∫ –∏–∑ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    return result