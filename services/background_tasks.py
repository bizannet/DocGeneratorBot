import asyncio
import logging
from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import config
from services.notifications import send_daily_stats_report, send_monthly_stats_report, send_yearly_stats_report

logger = logging.getLogger('doc_bot.background_tasks')


async def clean_expired_drafts_once():
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤")

    try:
        from database.drafts import get_expired_drafts, delete_draft
        expired_drafts = get_expired_drafts()

        if expired_drafts:
            deleted_count = 0
            for draft in expired_drafts:
                if delete_draft(draft['user_id'], draft['template_id']):
                    deleted_count += 1

            if deleted_count > 0:
                logger.info(f"‚úÖ –û—á–∏—â–µ–Ω–æ {deleted_count} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤")
            return deleted_count
        else:
            logger.debug("–ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return 0
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: {e}", exc_info=True)
        return 0


async def clean_expired_drafts():
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤")

    while True:
        try:
            await clean_expired_drafts_once()
            logger.debug("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 24 —á–∞—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤...")
            await asyncio.sleep(86400)
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: {e}", exc_info=True)
            await asyncio.sleep(3600)


async def send_draft_reminders(bot):
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞—Ö")

    while True:
        try:
            from database.drafts import get_connection
            from database.templates import get_template_by_id

            conn = get_connection()
            cursor = conn.cursor()
            now = datetime.now()
            two_hours_later = now + timedelta(hours=2)
            cursor.execute("""
                SELECT user_id, template_id, expires_at 
                FROM drafts 
                WHERE expires_at > ? AND expires_at <= ?
            """, (now, two_hours_later))
            drafts = cursor.fetchall()
            conn.close()

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(drafts)} —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

            for draft in drafts:
                user_id = draft[0]
                template_id = draft[1]
                expires_at = draft[2]

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
                    doc = get_template_by_id(template_id)
                    doc_name = doc['name'] if doc else "–¥–æ–∫—É–º–µ–Ω—Ç"

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await bot.send_message(
                        user_id,
                        f"‚è∞ <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n\n"
                        f"<b>'{doc_name}'</b>\n\n"
                        f"–ß–µ—Ä–Ω–æ–≤–∏–∫ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞. "
                        f"–ù–µ —Ç–µ—Ä—è–π—Ç–µ —Å–≤–æ—é —Ä–∞–±–æ—Ç—É ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ",
                                                  callback_data=f"draft_{template_id}")],
                            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫",
                                                  callback_data=f"delete_draft_{template_id}")]
                        ]),
                        parse_mode="HTML"
                    )
                    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —á–µ—Ä–Ω–æ–≤–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            logger.debug("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 30 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
            await asyncio.sleep(1800)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞—Ö: {e}", exc_info=True)
            # –ñ–¥–µ–º 15 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(900)


async def send_daily_stats():
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    while True:
        try:
            now = datetime.now()
            hour, minute = map(int, config.STATS_NOTIFICATION_TIME.split(":"))
            next_run = now.replace(hour=hour, minute=minute, second=0, microsecond=0)

            if now >= next_run:
                next_run += timedelta(days=1)

            sleep_seconds = (next_run - now).total_seconds()
            logger.info(f"–°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ {sleep_seconds} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(sleep_seconds)

            await send_daily_stats_report()
            logger.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

            if datetime.now().day == 1:
                await send_monthly_stats_report()
                logger.info("‚úÖ –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

            if datetime.now().month == 1 and datetime.now().day == 1:
                await send_yearly_stats_report()
                logger.info("‚úÖ –ì–æ–¥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
            await asyncio.sleep(3600)