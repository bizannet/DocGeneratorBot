import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from config import config
from database.users import get_referral_link, get_partner_stats
from texts.messages import PARTNER_PROGRAM_TEXT

logger = logging.getLogger('doc_bot.partners')
router = Router(name="partners_router")


def format_partner_text(user_id: int) -> str:
    referral_link = get_referral_link(user_id)
    return PARTNER_PROGRAM_TEXT.format(referral_link=referral_link)


@router.callback_query(F.data == "partner_program")
async def show_partner_program(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ")

    try:
        partner_text = format_partner_text(user_id)

        buttons = [
            [
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                    callback_data="update_partner_stats"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ÑπÔ∏è –ö–∞–∫ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å",
                    callback_data="partner_rules"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã",
                    callback_data="my_referrals"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_main"
                )
            ]
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            text=partner_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "update_partner_stats")
async def update_partner_stats(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–±–Ω–æ–≤–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞")

    try:
        partner_text = format_partner_text(user_id)

        buttons = [
            [
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                    callback_data="update_partner_stats"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ÑπÔ∏è –ö–∞–∫ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å",
                    callback_data="partner_rules"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã",
                    callback_data="my_referrals"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_main"
                )
            ]
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            text=partner_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)


@router.callback_query(F.data == "partner_rules")
async def partner_rules(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∞–≤–∏–ª–∞")

    try:
        rules_text = (
            "‚ÑπÔ∏è <b>–ö–∞–∫ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å</b>\n\n"
            "‚ú® <b>–¢–µ–ø–µ—Ä—å –≤—Å—ë –ø—Ä–æ—â–µ:</b>\n"
            "‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π\n"
            "‚Ä¢ –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –∑–∞–∫–∞–∑ –∑–∞ 1‚ÇΩ\n"
            "‚Ä¢ –í—ã —Ç–æ–∂–µ –ø–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –∑–∞–∫–∞–∑ –∑–∞ 1‚ÇΩ\n\n"
            "üéØ –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ ‚Äî –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞!"
        )

        buttons = [
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="partner_program")]
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            text=rules_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª", show_alert=True)


@router.callback_query(F.data == "my_referrals")
async def my_referrals(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")

    try:
        from database.users import get_user_referrals
        referrals = get_user_referrals(user_id)

        if referrals:
            referrals_text = "üë• <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b>\n\n"
            for i, referral in enumerate(referrals, 1):
                name = f"{referral['first_name']} {referral['last_name'] or ''}".strip()
                date = referral['registered_at'].split(' ')[0]
                referrals_text += f"{i}. {name}\n   üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {date}\n\n"
            referrals_text += "üéÅ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –≤—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ 1‚ÇΩ!"
        else:
            referrals_text = (
                "üë• <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
                "–ù–∞—á–Ω–∏—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π ‚Äî –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!"
            )

        buttons = [
            [InlineKeyboardButton(text="üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="get_referral_link")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="partner_program")]
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            text=referrals_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", show_alert=True)


@router.callback_query(F.data == "get_referral_link")
async def get_referral_link_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É")

    try:
        referral_link = get_referral_link(user_id)
        link_text = (
            "üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>\n\n"
            f"<code>{referral_link}</code>\n\n"
            "üéØ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –¥—Ä—É–≥—É ‚Äî –∏ –≤—ã –æ–±–∞ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞ 1 —Ä—É–±–ª—å!"
        )

        buttons = [
            [
                InlineKeyboardButton(
                    text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
                    switch_inline_query=f"–ü—Ä–∏–≥–ª–∞—à–∞—é –≤ @DocGeneratorBot ‚Äî –∑–∞–∫–∞–∑ –∑–∞ 1‚ÇΩ! {referral_link}"
                )
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="my_referrals")]
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            text=link_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏", show_alert=True)