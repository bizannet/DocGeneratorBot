import logging
import re
from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from config import config
from texts.messages import (
    MAIN_MENU_TEXT,
    SUPPORT_TEXT,
    ABOUT_TEXT
)

logger = logging.getLogger('doc_bot.utils')
router = Router(name="utils_router")


def format_user_info(user):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user_info = (
        f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
        f"‚Ä¢ ID: <code>{user.id}</code>\n"
    )

    if user.username:
        user_info += f"‚Ä¢ Username: @{user.username}\n"

    if user.first_name:
        user_info += f"‚Ä¢ –ò–º—è: {user.first_name}\n"

    if user.last_name:
        user_info += f"‚Ä¢ –§–∞–º–∏–ª–∏—è: {user.last_name}\n"

    user_info += f"‚Ä¢ –Ø–∑—ã–∫: {user.language_code}"

    return user_info


async def safe_edit_message(message, text, reply_markup=None, parse_mode="HTML"):
    try:
        if message.text == text and message.reply_markup == reply_markup:
            return True

        await message.edit_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
        return True
    except Exception as e:
        if "message is not modified" in str(e).lower():
            return True  # –¢–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        return False


async def create_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    buttons = [
        [
            InlineKeyboardButton(
                text="üìÇ –ö–∞—Ç–∞–ª–æ–≥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                callback_data="catalog"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîñ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã",
                callback_data="templates"
            ),
            InlineKeyboardButton(
                text="üõí –ö–æ—Ä–∑–∏–Ω–∞",
                callback_data="view_cart"
            )
        ],
        [
            InlineKeyboardButton(
                text="ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
                callback_data="partner_program"
            ),
            InlineKeyboardButton(
                text="üîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                callback_data="recommendations"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚ÑπÔ∏è –û –±–æ—Ç–µ",
                callback_data="about"
            ),
            InlineKeyboardButton(
                text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                callback_data="support"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
                callback_data="reviews"
            )
        ]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def format_order_summary(order):
    order_date = order['created_at'].split(' ')[0]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
    status_map = {
        'created': '–°–æ–∑–¥–∞–Ω',
        'pending': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
        'paid': '–û–ø–ª–∞—á–µ–Ω',
        'processing': '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è',
        'completed': '–ì–æ—Ç–æ–≤',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω',
        'refunded': '–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤'
    }
    status = status_map.get(order['status'], order['status'].capitalize())

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞
    items_text = ""
    for item in order['items']:
        items_text += f"‚Ä¢ {item['doc_name']} ‚Äî {item['price']} ‚ÇΩ\n"

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
    total = order['total_price']
    if order.get('savings', 0) > 0:
        total_text = f"–ò—Ç–æ–≥–æ: <s>{total + order['savings']} ‚ÇΩ</s> <b>{total} ‚ÇΩ</b> (-{order['savings']} ‚ÇΩ)"
    else:
        total_text = f"–ò—Ç–æ–≥–æ: <b>{total} ‚ÇΩ</b>"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    order_text = (
        f"üì¶ <b>–ó–∞–∫–∞–∑ #{order['id']}</b>\n"
        f"üìÖ –î–∞—Ç–∞: {order_date}\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å: {status}\n\n"
        f"{items_text}\n"
        f"{total_text}"
    )

    return order_text


async def send_long_message(bot, chat_id, text, max_length=4096, parse_mode="HTML"):
    if len(text) <= max_length:
        await bot.send_message(chat_id, text, parse_mode=parse_mode)
        return
    paragraphs = re.split(r'\n\s*\n', text)
    current_message = ""

    for paragraph in paragraphs:
        if len(current_message) + len(paragraph) + 2 > max_length:
            if current_message:
                await bot.send_message(chat_id, current_message, parse_mode=parse_mode)
            current_message = paragraph
        else:
            if current_message:
                current_message += "\n\n" + paragraph
            else:
                current_message = paragraph

    if current_message:
        await bot.send_message(chat_id, current_message, parse_mode=parse_mode)


def format_datetime(dt_str, format="%Y-%m-%d %H:%M:%S"):
    try:
        for fmt in ["%Y-%m-%d %H:%M:%S", "%Y-%m-%d", "%d.%m.%Y %H:%M:%S", "%d.%m.%Y"]:
            try:
                date_obj = datetime.strptime(dt_str, fmt)
                return date_obj.strftime("%d.%m.%Y %H:%M")
            except (ValueError, TypeError):
                continue
        return dt_str
    except Exception:
        return dt_str


def is_valid_user(user_id):
    return user_id is not None and user_id > 0


def is_admin(user_id):
    return user_id in config.ADMIN_IDS


@router.callback_query(F.data == "back_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    try:
        await state.clear()
        main_menu = await create_main_menu()
        await safe_edit_message(
            callback.message,
            MAIN_MENU_TEXT,
            reply_markup=main_menu
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await callback.answer()


@router.callback_query(F.data == "about")
async def show_about(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ")
    try:
        buttons = [
            [
                InlineKeyboardButton(
                    text="‚≠ê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã",
                    url="https://t.me/otzyvy_dokgenerator"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üíé –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É",
                    url="https://t.me/bizhack_annet"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_main"
                )
            ]
        ]

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await safe_edit_message(
            callback.message,
            ABOUT_TEXT,
            reply_markup=markup
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await callback.answer()


@router.callback_query(F.data == "support")
async def show_support(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ")

    try:
        buttons = [
            [
                InlineKeyboardButton(
                    text="–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                    url="https://t.me/biz_annet"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_main"
                )
            ]
        ]

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await safe_edit_message(
            callback.message,
            SUPPORT_TEXT,
            reply_markup=markup
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await callback.answer()


@router.callback_query(F.data == "unknown_callback")
async def handle_unknown_callback(callback: CallbackQuery):
    logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback –æ—Ç {callback.from_user.id}: {callback.data}")

    try:
        buttons = [
            [
                InlineKeyboardButton(
                    text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                    callback_data="back_main"
                )
            ]
        ]

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await safe_edit_message(
            callback.message,
            "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.",
            reply_markup=markup
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ callback: {e}", exc_info=True)


@router.message()
async def handle_unknown_message(message: Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")

    try:
        main_menu = await create_main_menu()
        await message.answer(
            "‚ö†Ô∏è –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é –Ω–∏–∂–µ.",
            reply_markup=main_menu
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)


def split_text(text, max_length=4000):
    parts = []
    while text:
        if len(text) <= max_length:
            parts.append(text)
            break
        else:
            split_index = text.rfind('\n\n', 0, max_length)
            if split_index == -1:
                split_index = text.rfind('. ', 0, max_length)
            if split_index == -1:
                split_index = max_length
            else:
                split_index += 2

            parts.append(text[:split_index])
            text = text[split_index:].strip()

    return parts


async def paginate_text(message, text, page=1, items_per_page=8):
    lines = text.split('\n')
    total_pages = (len(lines) + items_per_page - 1) // items_per_page

    if page < 1:
        page = 1
    elif page > total_pages:
        page = total_pages

    start_idx = (page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, len(lines))

    page_text = '\n'.join(lines[start_idx:end_idx])

    buttons = []
    if total_pages > 1:
        nav_buttons = []
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"page_{page - 1}"))
        nav_buttons.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="current_page"))
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"page_{page + 1}"))
        buttons.append(nav_buttons)

    buttons.append([
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    ])

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)

    await safe_edit_message(
        message,
        page_text,
        reply_markup=markup
    )


@router.callback_query(F.data.startswith("page_"))
async def handle_pagination(callback: CallbackQuery):
    try:
        page = int(callback.data.split("_")[1])
        text = "–°—Ç—Ä–æ–∫–∞ 1\n–°—Ç—Ä–æ–∫–∞ 2\n–°—Ç—Ä–æ–∫–∞ 3\n–°—Ç—Ä–æ–∫–∞ 4\n–°—Ç—Ä–æ–∫–∞ 5\n–°—Ç—Ä–æ–∫–∞ 6\n–°—Ç—Ä–æ–∫–∞ 7\n–°—Ç—Ä–æ–∫–∞ 8\n–°—Ç—Ä–æ–∫–∞ 9\n–°—Ç—Ä–æ–∫–∞ 10"
        await paginate_text(callback.message, text, page)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await callback.answer()


def get_user_name(user):
    if user.username:
        return f"@{user.username}"
    elif user.first_name and user.last_name:
        return f"{user.first_name} {user.last_name}"
    elif user.first_name:
        return user.first_name
    else:
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}"


async def handle_error(callback: CallbackQuery, error_message: str):
    logger.error(f"–û—à–∏–±–∫–∞: {error_message}")

    try:
        buttons = [
            [
                InlineKeyboardButton(
                    text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                    callback_data="back_main"
                )
            ]
        ]

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await safe_edit_message(
            callback.message,
            f"‚ö†Ô∏è {error_message}",
            reply_markup=markup
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏: {e}", exc_info=True)


def clean_html(text):
    clean_text = re.sub('<[^<]+?>', '', text)
    return clean_text


def escape_markdown(text):
    if not text:
        return text
    chars_to_escape = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']

    for char in chars_to_escape:
        text = text.replace(char, f'\\{char}')

    return text


def truncate_text(text, max_length=100):
    if len(text) <= max_length:
        return text
    else:
        return text[:max_length - 3] + "..."


async def show_error(message, error_message):
    try:
        buttons = [
            [
                InlineKeyboardButton(
                    text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                    callback_data="back_main"
                )
            ]
        ]

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer(
            f"‚ö†Ô∏è {error_message}",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ—à–∏–±–∫–∏: {e}", exc_info=True)