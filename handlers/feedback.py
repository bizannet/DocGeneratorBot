import logging
import re
from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from config import config
from database.users import get_user_reviews_count
from database.orders import get_user_orders

logger = logging.getLogger('doc_bot.feedback')
router = Router()


class ReviewStates(StatesGroup):
    waiting_for_review = State()
    choose_publish_type = State()


# –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
BLACKLIST_PATTERNS = [
    r"\b–º–∞—Ç\b", r"\b–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ\b", r"\b—Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ\b",
    r"\b—Ö—É–π\b", r"\b–ø–∏–∑–¥–∞\b", r"\b–µ–±–∞–ª\b", r"\b–µ–±–∞—Ç—å\b",
    r"\b—Ö—É–µ\b", r"\b—Ö—É—è\b", r"\b—Ö—É—ë\b", r"\b—Ö—É—ë–≤\b",
    r"\b–µ–±–∞–ª\b", r"\b–µ–±–ª–æ\b", r"\b–µ–±–ª—è\b", r"\b–µ–±–Ω—É—Ç—å\b"
]


@router.callback_query(F.data == "reviews")
async def show_reviews(callback: CallbackQuery):
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ö–æ—Ç—è –±—ã 1 –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
    from database.orders import get_user_orders
    orders = get_user_orders(user_id)
    paid_orders = [o for o in orders if o['status'] in ('paid', 'completed')]

    # –ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç ‚Äî –≤–∏–¥–µ–Ω –≤—Å–µ–º
    base_text = (
        "üåü <b>–û—Ç–∑—ã–≤—ã</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
        "üëâ –í—Å–µ –æ—Ç–∑—ã–≤—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ: https://t.me/docgenerator\n\n"
    )

    buttons = [
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
    ]

    if paid_orders:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ –æ—Ç–∑—ã–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        from database.users import get_user_reviews_count
        review_count = get_user_reviews_count(user_id)
        if review_count > 0:
            extra_text = "‚ö†Ô∏è –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤. –ù–æ–≤—ã–π –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π."
        else:
            extra_text = "üí¨ –•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤?"
            buttons.insert(0, [InlineKeyboardButton(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="start_review")])
    else:
        extra_text = "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –ª—é–±–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞."

    full_text = base_text + extra_text

    await callback.message.edit_text(
        full_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ –æ—Ç–∑—ã–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π?
    review_count = get_user_reviews_count(user_id)
    if review_count > 0:
        await callback.message.answer(
            "‚ö†Ô∏è –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤. –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 30 –¥–Ω–µ–π.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
            ])
        )
        await callback.answer()
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
    await callback.message.edit_text(
        "üåü <b>–û—Ç–∑—ã–≤—ã</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π.\n\n"
        "üëâ –í—Å–µ –æ—Ç–∑—ã–≤—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ: https://t.me/docgenerator\n\n"
        "–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ!",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="start_review")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
    )
    await callback.answer()


@router.callback_query(F.data == "start_review")
async def start_review(callback: CallbackQuery, state: FSMContext):
    review_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="review_rating_5")],
        [InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="review_rating_4")],
        [InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê", callback_data="review_rating_3")],
        [InlineKeyboardButton(text="‚≠ê‚≠ê", callback_data="review_rating_2")],
        [InlineKeyboardButton(text="‚≠ê", callback_data="review_rating_1")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="reviews")]
    ])

    await callback.message.edit_text(
        "üåü –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —á–µ—Å—Ç–Ω—ã–π –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ –î–æ–∫–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä!\n\n"
        "‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ - –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—Å—ë –∏–¥–µ–∞–ª—å–Ω–æ.\n"
        "‚òÖ‚òÖ‚òÖ‚òÖ - –•–æ—Ä–æ—à–æ, –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è.\n"
        "‚òÖ‚òÖ‚òÖ - –°—Ä–µ–¥–Ω–µ, –æ–∂–∏–¥–∞—é –±–æ–ª—å—à–µ–≥–æ.\n"
        "‚òÖ‚òÖ - –ü–ª–æ—Ö–æ, –º–Ω–æ–≥–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤.\n"
        "‚òÖ - –£–∂–∞—Å–Ω–æ, —Å–æ–≤—Å–µ–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.\n\n"
        "–í–∞—à –æ—Ç–∑—ã–≤ –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—Å!",
        reply_markup=review_markup,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith('review_rating_'))
async def handle_review_rating(callback: CallbackQuery, state: FSMContext):
    rating = int(callback.data.split('_')[2])
    await state.update_data(rating=rating)

    await callback.message.answer(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–∑—ã–≤ (–º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤).\n\n"
        "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å —Å–µ—Ä–≤–∏—Å!",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(ReviewStates.waiting_for_review)
    await callback.answer()


@router.message(StateFilter(ReviewStates.waiting_for_review))
async def save_review(message: Message, state: FSMContext):
    data = await state.get_data()
    rating = data.get("rating", 0)
    review_text = message.text.strip()

    if len(review_text) < 20:
        await message.answer(
            "‚ùå –í–∞—à –æ—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–∑—ã–≤ (–º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤).",
            reply_markup=ReplyKeyboardRemove()
        )
        return

    for pattern in BLACKLIST_PATTERNS:
        if re.search(pattern, review_text.lower()):
            await message.answer("‚ùå –í–∞—à –æ—Ç–∑—ã–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
            await state.clear()
            return

    publish_choice_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ", callback_data="publish_anonymously")],
        [InlineKeyboardButton(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å –º–æ–∏–º –Ω–∏–∫–æ–º", callback_data="publish_with_username")]
    ])

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üôè\n\n"
        "–•–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤ –∞–Ω–æ–Ω–∏–º–Ω–æ –∏–ª–∏ —Å –≤–∞—à–∏–º –Ω–∏–∫–æ–º?",
        reply_markup=publish_choice_markup
    )
    await state.update_data(review_text=review_text)
    await state.set_state(ReviewStates.choose_publish_type)


@router.callback_query(StateFilter(ReviewStates.choose_publish_type))
async def process_publish_type(callback: CallbackQuery, state: FSMContext):
    choice = callback.data
    data = await state.get_data()
    rating = data.get("rating", 0)
    review_text = data.get("review_text", "")

    if choice == "publish_anonymously":
        publish_text = (
            f"üî• –ê–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–∑—ã–≤:\n\n"
            f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {'‚≠ê' * rating}\n"
            f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {review_text}"
        )
    else:
        username = callback.from_user.username or callback.from_user.first_name
        publish_text = (
            f"üëâ –û—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <a href='tg://user?id={callback.from_user.id}'>"
            f"{username}</a>:\n\n"
            f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {'‚≠ê' * rating}\n"
            f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {review_text}"
        )

    try:
        await callback.message.bot.send_message(
            chat_id=config.REVIEWS_CHANNEL_ID,
            text=publish_text,
            parse_mode="HTML"
        )
        await callback.message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ: https://t.me/docgenerator",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã", url="https://t.me/docgenerator")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ –≤ –∫–∞–Ω–∞–ª: {e}")
        await callback.message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
            "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @biz_annet"
        )

    await state.clear()
    await callback.answer()