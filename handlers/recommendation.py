# import logging
# from aiogram import Router, F
# from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import State, StatesGroup
# from config import config
# from database.templates import get_templates_by_category, get_template_by_id
# from database.orders import get_user_orders
# from texts.messages import (
#     RECOMMENDATIONS_TEXT,
#     NO_RECOMMENDATIONS_TEXT,
#     DOCUMENT_DESCRIPTION_TEXT,
#     CART_TEXT
# )
# from database.cart import add_to_cart, get_user_cart, clear_cart
# from services.validators import validate_field
#
# logger = logging.getLogger('doc_bot.recommendation')
# router = Router(name="recommendation_router")
#
#
# class RecommendationStates(StatesGroup):
#     ASKING_QUESTIONS = State()
#     SHOWING_RECOMMENDATIONS = State()
#
#
# # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
# RECOMMENDATION_QUESTIONS = [
#     {
#         "id": "business_type",
#         "question": "–ö–∞–∫–æ–π —É –≤–∞—Å —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞?",
#         "options": [
#             {"text": "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω", "value": "ecommerce", "weight": 1.0},
#             {"text": "–£—Å–ª—É–≥–∏ (—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ, –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–µ –∏ –¥—Ä.)", "value": "services", "weight": 0.8},
#             {"text": "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "value": "realestate", "weight": 0.7},
#             {"text": "–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏", "value": "logistics", "weight": 0.6},
#             {"text": "–î—Ä—É–≥–æ–µ", "value": "other", "weight": 0.3}
#         ]
#     },
#     {
#         "id": "business_size",
#         "question": "–ö–∞–∫–æ–π –º–∞—Å—à—Ç–∞–± –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞?",
#         "options": [
#             {"text": "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", "value": "individual", "weight": 0.5},
#             {"text": "–ò–ü", "value": "ip", "weight": 0.7},
#             {"text": "–û–û–û", "value": "ooo", "weight": 1.0},
#             {"text": "–ö—Ä—É–ø–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è", "value": "corporation", "weight": 1.2}
#         ]
#     },
#     {
#         "id": "website",
#         "question": "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å–∞–π—Ç –∏–ª–∏ –æ–Ω–ª–∞–π–Ω-–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ?",
#         "options": [
#             {"text": "–î–∞, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω", "value": "ecommerce_site", "weight": 1.0},
#             {"text": "–î–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∞–π—Ç", "value": "info_site", "weight": 0.8},
#             {"text": "–ù–µ—Ç", "value": "no_website", "weight": 0.1}
#         ]
#     },
#     {
#         "id": "data_processing",
#         "question": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –ª–∏ –≤—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?",
#         "options": [
#             {"text": "–î–∞, –∞–∫—Ç–∏–≤–Ω–æ", "value": "active", "weight": 1.0},
#             {"text": "–î–∞, –Ω–æ –Ω–µ–º–Ω–æ–≥–æ", "value": "limited", "weight": 0.7},
#             {"text": "–ù–µ—Ç", "value": "none", "weight": 0.1}
#         ]
#     }
# ]
#
# # –ü—Ä–∞–≤–∏–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
# RECOMMENDATION_RULES = [
#     {
#         "condition": lambda answers: answers.get("business_type") == "ecommerce" or
#                                      answers.get("website") in ["ecommerce_site", "info_site"] or
#                                      answers.get("data_processing") in ["active", "limited"],
#         "templates": [
#             {"category": "website", "templates": ["privacy_policy_2025", "consent_2025", "cookie_policy_2025"],
#              "priority": 1.0}
#         ]
#     },
#     {
#         "condition": lambda answers: answers.get("business_type") == "services",
#         "templates": [
#             {"category": "business", "templates": ["service_contract_2025", "work_contract_2025", "act_2025"],
#              "priority": 0.9}
#         ]
#     },
#     {
#         "condition": lambda answers: answers.get("business_type") == "realestate",
#         "templates": [
#             {"category": "realestate",
#              "templates": ["rental_contract_2025", "acceptance_transfer_2025", "inventory_2025"], "priority": 0.9}
#         ]
#     },
#     {
#         "condition": lambda answers: answers.get("business_type") == "logistics",
#         "templates": [
#             {"category": "logistics",
#              "templates": ["cargo_transport_2025", "cargo_transport_waybill_2025", "cargo_acceptance_2025"],
#              "priority": 0.9}
#         ]
#     },
#     {
#         "condition": lambda answers: answers.get("business_size") in ["ip", "ooo"],
#         "templates": [
#             {"category": "business", "templates": ["public_offer_2025"], "priority": 0.7}
#         ]
#     },
#     {
#         "condition": lambda answers: answers.get("business_size") == "ooo",
#         "templates": [
#             {"category": "financial", "templates": ["work_acceptance_2025", "work_estimate_2025"], "priority": 0.6}
#         ]
#     },
#     {
#         "condition": lambda answers: answers.get("data_processing") == "active",
#         "templates": [
#             {"category": "website", "templates": ["notification_2025"], "priority": 0.8}
#         ]
#     }
# ]
#
# # –°–≤—è–∑–∏ –º–µ–∂–¥—É –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ (–∫–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —á–∞—Å—Ç–æ –ø–æ–∫—É–ø–∞—é—Ç –≤–º–µ—Å—Ç–µ)
# DOCUMENT_RELATIONSHIPS = {
#     "service_contract_2025": ["work_contract_2025", "act_2025", "public_offer_2025"],
#     "work_contract_2025": ["service_contract_2025", "act_2025"],
#     "act_2025": ["service_contract_2025", "work_contract_2025"],
#     "public_offer_2025": ["service_contract_2025"],
#     "privacy_policy_2025": ["consent_2025", "cookie_policy_2025", "notification_2025"],
#     "consent_2025": ["privacy_policy_2025", "cookie_policy_2025"],
#     "cookie_policy_2025": ["privacy_policy_2025", "consent_2025"],
#     "notification_2025": ["privacy_policy_2025"],
#     "rental_contract_2025": ["acceptance_transfer_2025", "inventory_2025"],
#     "acceptance_transfer_2025": ["rental_contract_2025", "inventory_2025"],
#     "inventory_2025": ["rental_contract_2025", "acceptance_transfer_2025"],
#     "cargo_transport_2025": ["cargo_transport_waybill_2025", "cargo_acceptance_2025"],
#     "cargo_transport_waybill_2025": ["cargo_transport_2025", "cargo_acceptance_2025"],
#     "cargo_acceptance_2025": ["cargo_transport_2025", "cargo_transport_waybill_2025"],
#     "work_acceptance_2025": ["work_estimate_2025", "work_technical_task_2025"],
#     "work_estimate_2025": ["work_acceptance_2025", "work_technical_task_2025"]
# }
#
#
# @router.callback_query(F.data == "recommendations")
# async def start_recommendations(callback: CallbackQuery, state: FSMContext):
#     """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
#     user_id = callback.from_user.id
#     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
#
#     try:
#         # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
#         await state.update_data(
#             answers={},
#             current_question=0
#         )
#
#         # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
#         await state.set_state(RecommendationStates.ASKING_QUESTIONS)
#
#         # –ó–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
#         await ask_question(callback, state)
#
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}", exc_info=True)
#         await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", show_alert=True)
#         await callback.answer()
#
#
# async def ask_question(callback: CallbackQuery, state: FSMContext):
#     """–ó–∞–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
#     try:
#         data = await state.get_data()
#         current_question = data.get('current_question', 0)
#
#         if current_question >= len(RECOMMENDATION_QUESTIONS):
#             await generate_recommendations(callback, state)
#             return
#
#         # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
#         question = RECOMMENDATION_QUESTIONS[current_question]
#
#         # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
#         question_text = (
#             f"üîç <b>–ü–æ–¥–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</b>\\n"
#             f"–í–æ–ø—Ä–æ—Å {current_question + 1}/{len(RECOMMENDATION_QUESTIONS)}:\n\n"
#             f"<b>{question['question']}</b>"
#         )
#
#         # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
#         buttons = []
#         for option in question['options']:
#             buttons.append([
#                 InlineKeyboardButton(
#                     text=option['text'],
#                     callback_data=f"rec_{question['id']}_{option['value']}"
#                 )
#             ])
#
#         # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
#         if current_question > 0:
#             buttons.append([
#                 InlineKeyboardButton(
#                     text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
#                     callback_data="rec_prev"
#                 )
#             ])
#
#         # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
#         buttons.append([
#             InlineKeyboardButton(
#                 text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
#                 callback_data="rec_skip"
#             )
#         ])
#
#         # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
#         buttons.append([
#             InlineKeyboardButton(
#                 text="‚ùå –û—Ç–º–µ–Ω–∞",
#                 callback_data="rec_cancel"
#             )
#         ])
#
#         markup = InlineKeyboardMarkup(inline_keyboard=buttons)
#
#         await callback.message.edit_text(
#             text=question_text,
#             parse_mode="HTML",
#             reply_markup=markup
#         )
#         await callback.answer()
#
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–¥–∞–≤–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}", exc_info=True)
#         await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–∞", show_alert=True)
#         await callback.answer()
#
#
# @router.callback_query(F.data.startswith("rec_"))
# async def process_answer(callback: CallbackQuery, state: FSMContext):
#     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
#     user_id = callback.from_user.id
#     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–∞–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {callback.data}")
#
#     try:
#         data = await state.get_data()
#         current_question = data.get('current_question', 0)
#         answers = data.get('answers', {})
#
#         # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã callback-–¥–∞–Ω–Ω—ã—Ö
#         if callback.data == "rec_prev":
#             # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
#             if current_question > 0:
#                 await state.update_data(current_question=current_question - 1)
#                 await ask_question(callback, state)
#             return
#
#         elif callback.data == "rec_skip":
#             # –ü—Ä–æ–ø—É—Å–∫ –≤–æ–ø—Ä–æ—Å–∞
#             await state.update_data(current_question=current_question + 1)
#             await ask_question(callback, state)
#             return
#
#         elif callback.data == "rec_cancel":
#             # –û—Ç–º–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
#             await state.clear()
#
#             await callback.message.edit_text(
#                 "‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç–º–µ–Ω–µ–Ω.",
#                 reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#                     [
#                         InlineKeyboardButton(
#                             text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
#                             callback_data="back_main"
#                         )
#                     ]
#                 ])
#             )
#             await callback.answer()
#             return
#
#         else:
#             # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
#             parts = callback.data.split("_")
#             if len(parts) < 3:
#                 await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞", show_alert=True)
#                 await callback.answer()
#                 return
#
#             question_id = parts[1]
#             option_value = parts[2]
#
#             # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
#             answers[question_id] = option_value
#             await state.update_data(
#                 answers=answers,
#                 current_question=current_question + 1
#             )
#
#             # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
#             await ask_question(callback, state)
#
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
#         await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞", show_alert=True)
#         await callback.answer()
#
#
# async def generate_recommendations(callback: CallbackQuery, state: FSMContext):
#     """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
#     try:
#         user_id = callback.from_user.id
#         data = await state.get_data()
#         answers = data.get('answers', {})
#
#         # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª
#         recommendations = []
#         template_ids = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
#
#         # 1. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
#         for rule in RECOMMENDATION_RULES:
#             if rule["condition"](answers):
#                 for template_group in rule["templates"]:
#                     category = template_group["category"]
#                     base_priority = template_group["priority"]
#
#                     for template_name in template_group["templates"]:
#                         # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø–æ –∏–º–µ–Ω–∏
#                         templates = get_templates_by_category(category)
#                         for template in templates:
#                             if template["template_name"] == template_name and template["id"] not in template_ids:
#                                 # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ –ø—Ä–∞–≤–∏–ª
#                                 priority = base_priority
#
#                                 # 2. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—à–ª—ã—Ö –∑–∞–∫–∞–∑–æ–≤
#                                 past_orders = get_user_orders(user_id)
#                                 if past_orders:
#                                     for order in past_orders:
#                                         for item in order["items"]:
#                                             # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–∫—É–ø–∞–ª –ø–æ—Ö–æ–∂–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
#                                             if item["category"] == category:
#                                                 priority += 0.2
#
#                                             # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
#                                             if item["template_name"] in DOCUMENT_RELATIONSHIPS:
#                                                 related_templates = DOCUMENT_RELATIONSHIPS[item["template_name"]]
#                                                 if template_name in related_templates:
#                                                     priority += 0.3
#
#                                 recommendations.append({
#                                     "id": template["id"],
#                                     "name": template["name"],
#                                     "price": template["price"],
#                                     "category": category,
#                                     "priority": priority,
#                                     "source": "question_based"
#                                 })
#                                 template_ids.add(template["id"])
#                                 break
#
#         # 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—à–ª—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã)
#         if not recommendations and answers:
#             past_orders = get_user_orders(user_id)
#             if past_orders:
#                 for order in past_orders:
#                     for item in order["items"]:
#                         if item["template_name"] in DOCUMENT_RELATIONSHIPS:
#                             related_templates = DOCUMENT_RELATIONSHIPS[item["template_name"]]
#
#                             for related_template in related_templates:
#                                 # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏ —à–∞–±–ª–æ–Ω–∞
#                                 category = None
#                                 for cat, templates_list in get_templates_by_category("all").items():
#                                     for t in templates_list:
#                                         if t["template_name"] == related_template:
#                                             category = cat
#                                             break
#                                     if category:
#                                         break
#
#                                 if category:
#                                     templates = get_templates_by_category(category)
#                                     for template in templates:
#                                         if template["template_name"] == related_template and template[
#                                             "id"] not in template_ids:
#                                             # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —É–∂–µ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö
#                                             if not any(r["id"] == template["id"] for r in recommendations):
#                                                 recommendations.append({
#                                                     "id": template["id"],
#                                                     "name": template["name"],
#                                                     "price": template["price"],
#                                                     "category": category,
#                                                     "priority": 0.7,
#                                                     # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—à–ª—ã—Ö –∑–∞–∫–∞–∑–æ–≤
#                                                     "source": "past_orders"
#                                                 })
#                                                 template_ids.add(template["id"])
#
#         # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
#         recommendations.sort(key=lambda x: x["priority"], reverse=True)
#
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
#         await state.update_data(recommendations=recommendations)
#
#         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
#         await show_recommendations(callback, state)
#
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}", exc_info=True)
#         await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", show_alert=True)
#         await callback.answer()
#
#
# async def show_recommendations(callback: CallbackQuery, state: FSMContext):
#     """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
#     try:
#         data = await state.get_data()
#         recommendations = data.get('recommendations', [])
#
#         if not recommendations:
#             await callback.message.edit_text(
#                 NO_RECOMMENDATIONS_TEXT,
#                 parse_mode="HTML",
#                 reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#                     [
#                         InlineKeyboardButton(
#                             text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑",
#                             callback_data="recommendations"
#                         )
#                     ],
#                     [
#                         InlineKeyboardButton(
#                             text="üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥",
#                             callback_data="catalog"
#                         )
#                     ],
#                     [
#                         InlineKeyboardButton(
#                             text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
#                             callback_data="back_main"
#                         )
#                     ]
#                 ])
#             )
#             await callback.answer()
#             return
#
#         # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
#         documents_list = ""
#         for i, doc in enumerate(recommendations, 1):
#             documents_list += f"{i}. {doc['name']} ‚Äî {doc['price']} ‚ÇΩ\n"
#
#         # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
#         recommendations_text = RECOMMENDATIONS_TEXT.format(
#             documents_list=documents_list
#         )
#
#         # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
#         if any(doc["source"] == "past_orders" for doc in recommendations):
#             recommendations_text += (
#                 "\n\n<i>–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –≤–∞—à–∏—Ö –ø—Ä–æ—à–ª—ã—Ö –∑–∞–∫–∞–∑–∞—Ö. "
#                 "–ú—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –ø–æ–∫—É–ø–∞—é—Ç –≤–º–µ—Å—Ç–µ —Å —Ç–µ–º–∏, —á—Ç–æ –≤—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏.</i>"
#             )
#
#         # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#         buttons = []
#
#         # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
#         for i, doc in enumerate(recommendations, 1):
#             buttons.append([
#                 InlineKeyboardButton(
#                     text=f"üìÑ {doc['name']}",
#                     callback_data=f"rec_doc_{doc['id']}"
#                 )
#             ])
#
#         # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
#         buttons.append([
#             InlineKeyboardButton(
#                 text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –≤ –∫–æ—Ä–∑–∏–Ω—É",
#                 callback_data="rec_add_all"
#             )
#         ])
#         buttons.append([
#             InlineKeyboardButton(
#                 text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
#                 callback_data="recommendations"
#             )
#         ])
#         buttons.append([
#             InlineKeyboardButton(
#                 text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
#                 callback_data="back_main"
#             )
#         ])
#
#         markup = InlineKeyboardMarkup(inline_keyboard=buttons)
#
#         await callback.message.edit_text(
#             text=recommendations_text,
#             parse_mode="HTML",
#             reply_markup=markup
#         )
#         await callback.answer()
#
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}", exc_info=True)
#         await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", show_alert=True)
#         await callback.answer()
#
#
# @router.callback_query(F.data.startswith("rec_doc_"))
# async def show_recommendation_document(callback: CallbackQuery, state: FSMContext):
#     """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
#     try:
#         doc_id = int(callback.data.split("_")[2])
#         data = await state.get_data()
#         recommendations = data.get('recommendations', [])
#
#         # –ù–∞—Ö–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö
#         doc = None
#         for rec in recommendations:
#             if rec['id'] == doc_id:
#                 doc = rec
#                 break
#
#         if not doc:
#             await callback.answer("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
#             await callback.answer()
#             return
#
#         # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞
#         document_text = DOCUMENT_DESCRIPTION_TEXT.format(
#             doc_name=doc['name'],
#             description="–≠—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.",
#             price=doc['price']
#         )
#
#         # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –ø–æ—á–µ–º—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç
#         if doc.get("source") == "past_orders":
#             document_text += (
#                 "\n\n<i>–≠—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —á–∞—Å—Ç–æ –ø–æ–∫—É–ø–∞—é—Ç –≤–º–µ—Å—Ç–µ —Å —Ç–µ–º–∏, —á—Ç–æ –≤—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ä–∞–Ω–µ–µ.</i>"
#             )
#
#         # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#         markup = InlineKeyboardMarkup(inline_keyboard=[
#             [
#                 InlineKeyboardButton(
#                     text="üìù –ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ",
#                     callback_data=f"fill_{doc['id']}"
#                 )
#             ],
#             [
#                 InlineKeyboardButton(
#                     text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
#                     callback_data=f"rec_add_{doc['id']}"
#                 )
#             ],
#             [
#                 InlineKeyboardButton(
#                     text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º",
#                     callback_data="show_recommendations"
#                 )
#             ]
#         ])
#
#         await callback.message.edit_text(
#             text=document_text,
#             parse_mode="HTML",
#             reply_markup=markup
#         )
#         await callback.answer()
#
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}", exc_info=True)
#         await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
#         await callback.answer()
#
#
# @router.callback_query(F.data == "show_recommendations")
# async def back_to_recommendations(callback: CallbackQuery, state: FSMContext):
#     """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
#     await show_recommendations(callback, state)
#
#
# @router.callback_query(F.data.startswith("rec_add_"))
# async def add_to_cart_handler(callback: CallbackQuery, state: FSMContext):
#     """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É"""
#     try:
#         if callback.data == "rec_add_all":
#             # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
#             data = await state.get_data()
#             recommendations = data.get('recommendations', [])
#
#             if not recommendations:
#                 await callback.answer("‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", show_alert=True)
#                 await callback.answer()
#                 return
#
#             # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
#             for doc in recommendations:
#                 add_to_cart(callback.from_user.id, doc['id'])
#
#             await callback.answer(f"‚úÖ {len(recommendations)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!", show_alert=True)
#         else:
#             # –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç
#             doc_id = int(callback.data.split("_")[2])
#             add_to_cart(callback.from_user.id, doc_id)
#
#             await callback.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!", show_alert=True)
#
#         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
#         cart = get_user_cart(callback.from_user.id)
#         total_price = sum(item['price'] for item in cart['items'])
#
#         cart_text = CART_TEXT.format(
#             item_count=cart['item_count'],
#             total_price=total_price
#         )
#
#         # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#         buttons = [
#             [
#                 InlineKeyboardButton(
#                     text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
#                     callback_data="checkout"
#                 )
#             ],
#             [
#                 InlineKeyboardButton(
#                     text="üõçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏",
#                     callback_data="catalog"
#                 )
#             ],
#             [
#                 InlineKeyboardButton(
#                     text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
#                     callback_data="back_main"
#                 )
#             ]
#         ]
#
#         markup = InlineKeyboardMarkup(inline_keyboard=buttons)
#
#         await callback.message.edit_text(
#             text=cart_text,
#             parse_mode="HTML",
#             reply_markup=markup
#         )
#         await callback.answer()
#
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}", exc_info=True)
#         await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)
#         await callback.answer()