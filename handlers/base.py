import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, CommandObject

from texts.messages import (
    MAIN_MENU_TEXT,
    ABOUT_TEXT,
    SUPPORT_TEXT,
    CART_TEXT,
    CART_EMPTY_TEXT
)
from database.users import get_or_create_user
from database.cart import get_user_cart, clear_cart
from database.promocodes import add_referral, create_ruble_promocode
from services.notifications import notify_support_about_support_request
from config import config

logger = logging.getLogger('doc_bot.base')
router = Router(name="base_router")


class ContactSupport(StatesGroup):
    waiting_for_message = State()


def format_item_count(count: int) -> str:
    if count % 10 == 1 and count % 100 != 11:
        return f"{count} –¥–æ–∫—É–º–µ–Ω—Ç"
    elif 2 <= count % 10 <= 4 and (count % 100 < 10 or count % 100 >= 20):
        return f"{count} –¥–æ–∫—É–º–µ–Ω—Ç–∞"
    else:
        return f"{count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"


def format_cart_items(items: list) -> str:
    items_list = ""
    for i, item in enumerate(items, 1):
        doc_type = "—à–∞–±–ª–æ–Ω"
        if '_autogen' in item.get('cart_item_id', ''):
            doc_type = "–∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
        price = item['price']
        items_list += f"{i}. {item['doc_name']} ({doc_type}) - {price} ‚ÇΩ\n"
    return items_list


@router.message(Command("start"))
async def cmd_start(message: Message, command: CommandObject, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    try:
        await state.clear()

        get_or_create_user(
            user_id=str(user_id),
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            language_code=message.from_user.language_code
        )

        if command.args and command.args.startswith("ref"):
            try:
                referrer_id = int(command.args[3:])
                if referrer_id != user_id:
                    if add_referral(referrer_id, user_id):
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª –¥–ª—è {referrer_id}")

                        promo_newbie = create_ruble_promocode(user_id)
                        if promo_newbie:
                            await message.answer(
                                f"üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º! –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.\n\n"
                                f"–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ <b>1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–∫–∞–∑</b>: <code>{promo_newbie}</code>\n"
                                f"–ü—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 1 —Ä–∞–∑. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞!",
                                parse_mode="HTML"
                            )

                        promo_referrer = create_ruble_promocode(referrer_id)
                        if promo_referrer:
                            try:
                                await message.bot.send_message(
                                    chat_id=referrer_id,
                                    text=f"üéÅ –û—Ç–ª–∏—á–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à—ë–ª –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.\n\n"
                                         f"–í–∞—à –±–æ–Ω—É—Å ‚Äî –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ <b>1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–∫–∞–∑</b>: <code>{promo_referrer}</code>",
                                    parse_mode="HTML"
                                )
                                logger.info(f"–ü—Ä–æ–º–æ–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id}")
                            except Exception as e:
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id}: {e}")
                        else:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id}")
                    else:
                        logger.info(f"–†–µ—Ñ–µ—Ä–∞–ª {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥—É–±–ª—å)")
                else:
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É")

            except (ValueError, TypeError):
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {command.args}")

        # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        cart = get_user_cart(user_id)
        cart_badge = f" ({cart['item_count']})" if cart['item_count'] > 0 else ""

        buttons = [
            [InlineKeyboardButton(text="üìÅ –ö–∞—Ç–∞–ª–æ–≥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", callback_data="catalog")],
            [InlineKeyboardButton(text="ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="partner_program")],
            [InlineKeyboardButton(text=f"üõí –ö–æ—Ä–∑–∏–Ω–∞{cart_badge}", callback_data="view_cart")],
            [InlineKeyboardButton(text="üì¶ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data="order_history")],
            [InlineKeyboardButton(text="‚≠ê –û—Ç–∑—ã–≤—ã", callback_data="reviews")],
            [InlineKeyboardButton(text="‚ùì –û –±–æ—Ç–µ", callback_data="about")],
            [InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
        ]

        if user_id in config.ADMIN_IDS:
            buttons.append([InlineKeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer(
            MAIN_MENU_TEXT,
            reply_markup=markup,
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @biz_annet",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
            ])
        )


@router.callback_query(F.data == "back_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await state.clear()
    await cmd_start(callback.message, CommandObject(), state)
    await callback.answer()


@router.callback_query(F.data == "view_cart")
async def view_cart(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∫–æ—Ä–∑–∏–Ω—É")

    try:
        cart = get_user_cart(user_id)

        if not cart['items']:
            await callback.message.edit_text(
                CART_EMPTY_TEXT,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
                ])
            )
            await callback.answer()
            return

        items_list = format_cart_items(cart['items'])
        item_count_str = format_item_count(cart['item_count'])
        cart_text = (
            "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"
            f"{items_list}\n"
            f"–í –∫–æ—Ä–∑–∏–Ω–µ: {item_count_str}\n"
            f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{cart['total']} ‚ÇΩ</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑."
        )

        buttons = [
            [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
            [InlineKeyboardButton(text="üõçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="catalog")],
            [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            text=cart_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã", show_alert=True)


@router.callback_query(F.data == "clear_cart")
async def clear_cart_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –æ—á–∏—Å—Ç–∫—É –∫–æ—Ä–∑–∏–Ω—ã")

    try:
        success = clear_cart(user_id)
        if success:
            await callback.answer("‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞", show_alert=True)
            cart = get_user_cart(user_id)
            if not cart['items']:
                await callback.message.edit_text(
                    CART_EMPTY_TEXT,
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
                    ])
                )
            else:
                await view_cart(callback)
        else:
            await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã", show_alert=True)


@router.callback_query(F.data == "about")
async def show_about(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é '–û –±–æ—Ç–µ'")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã", url="https://t.me/docgenerator")],
        [InlineKeyboardButton(text="üíé –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É", url="https://t.me/bizhack_annet")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])

    await callback.message.edit_text(
        ABOUT_TEXT,
        parse_mode="HTML",
        reply_markup=keyboard,
        disable_web_page_preview=True
    )
    await callback.answer()


@router.callback_query(F.data == "support")
async def handle_support(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="contact_support")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])

    await callback.message.edit_text(
        SUPPORT_TEXT,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "contact_support")
async def contact_support(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–µ—Ä–µ—à–µ–ª –≤ —Ä–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏")

    await callback.message.edit_text(
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
        ])
    )
    await state.set_state(ContactSupport.waiting_for_message)
    await callback.answer()


@router.message(ContactSupport.waiting_for_message)
async def process_support_message(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    try:
        await notify_support_about_support_request(message.from_user.id, message.text)

        await message.answer(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n\n"
            "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
            ])
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é: @biz_annet",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
            ])
        )
        await state.clear()