# handlers/payment.py
import logging
import os
from datetime import datetime
from typing import List
from aiogram import Router, F, Bot
from aiogram.types import (
    CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup,
    PreCheckoutQuery, FSInputFile
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import config
from database.orders import (
    create_order, add_order_item, update_order_status, get_order_by_id,
    get_user_orders
)
from database.cart import get_user_cart, clear_cart, get_cart_total
from database.users import get_partner_stats
from database.payments import create_payment, update_payment_status
from database.promocodes import apply_promocode, check_promocode
from payment.yookassa_integration import (
    create_payment,
    check_payment_status
)
from services.document_generator import generate_document
from services.notifications import notify_support_about_new_order
from texts.messages import (
    CHECKOUT_TEXT,
    PAYMENT_SUCCESS_TEXT,
    CART_EMPTY_TEXT,
    PROMOCODE_APPLIED_TEXT,
    PROMOCODE_ERROR_TEXT,
    YOOKASSA_PAYMENT_TEXT,
    CHECK_PAYMENT_TEXT
)

logger = logging.getLogger('doc_bot.payment')
router = Router(name="payment_router")


class PaymentStates(StatesGroup):
    CHECKING_PAYMENT = State()


class PromocodeStates(StatesGroup):
    WAITING_FOR_PROMOCODE = State()


@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞")

    try:
        cart = get_user_cart(user_id)
        if not cart['items']:
            logger.info(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—É—Å—Ç–∞")
            await callback.message.edit_text(
                CART_EMPTY_TEXT,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
                ])
            )
            await callback.answer()
            return

        total_price = get_cart_total(user_id)
        promocode_data = await state.get_data()
        applied_promocode = promocode_data.get('applied_promocode')
        discount = promocode_data.get('discount', 0)
        discounted_price = total_price * (1 - discount / 100) if discount > 0 else total_price

        await state.update_data(
            cart_items=cart['items'],
            total_price=total_price,
            discounted_price=discounted_price,
            item_count=cart['item_count'],
            promocode=applied_promocode
        )

        promocode_text = ""
        if applied_promocode:
            promocode_text = f"\n–ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥ <b>{applied_promocode}</b> ({discount}% —Å–∫–∏–¥–∫–∞)"

        checkout_text = CHECKOUT_TEXT.format(
            item_count=cart['item_count'],
            total_price=total_price,
            discounted_price=discounted_price,
            promocode_info=promocode_text
        )

        buttons = []
        partner_stats = get_partner_stats(user_id)
        available_points = partner_stats['available_points'] if partner_stats else 0
        if available_points > 0:
            buttons.append([
                InlineKeyboardButton(
                    text=f"üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –±–∞–ª–ª–∞–º–∏ (–¥–æ—Å—Ç—É–ø–Ω–æ {available_points} ‚ÇΩ)",
                    callback_data="pay_with_points"
                )
            ])
        buttons.append([
            InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ÆKassa", callback_data="pay_with_yookassa")
        ])
        buttons.append([
            InlineKeyboardButton(text="üéü –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promocode")
        ])
        buttons.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="view_cart")
        ])

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.edit_text(text=checkout_text, parse_mode="HTML", reply_markup=markup)
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)


@router.callback_query(F.data == "enter_promocode")
async def enter_promocode(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="checkout")]
        ])
    )
    await state.set_state(PromocodeStates.WAITING_FOR_PROMOCODE)
    await callback.answer()


@router.message(PromocodeStates.WAITING_FOR_PROMOCODE)
async def process_promocode(message: Message, state: FSMContext):
    user_id = message.from_user.id
    promocode = message.text.strip().upper()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –ø—Ä–æ–º–æ–∫–æ–¥: {promocode}")

    data = await state.get_data()
    total_price = data.get('total_price', 0)
    result = check_promocode(promocode, user_id)

    if result:
        discount = result['discount']
        discounted_price = total_price * (1 - discount / 100)
        await state.update_data(
            applied_promocode=promocode,
            discount=discount,
            discounted_price=discounted_price
        )

        display_price = discounted_price
        payment_note = ""
        if discounted_price <= 0:
            display_price = 0.0
            payment_note = (
                "\n‚ÑπÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ ‚Äî 1 ‚ÇΩ. "
                "–í—ã –±—É–¥–µ—Ç–µ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç—ë–∂ –≤ 1 —Ä—É–±–ª—å."
            )

        promo_applied_text = (
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω!\n"
            f"–í–∞—à–∞ –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {display_price:.2f} ‚ÇΩ"
            f"{payment_note}"
        )

        promocode_text = f"\n–ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥ <b>{promocode}</b> ({discount}% —Å–∫–∏–¥–∫–∞)"
        checkout_text = CHECKOUT_TEXT.format(
            item_count=data['item_count'],
            total_price=total_price,
            discounted_price=discounted_price,
            promocode_info=promocode_text
        )

        buttons = [
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ÆKassa", callback_data="pay_with_yookassa")],
            [InlineKeyboardButton(text="üéü –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promocode")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="view_cart")]
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer(text=promo_applied_text, parse_mode="HTML")
        await message.answer(text=checkout_text, parse_mode="HTML", reply_markup=markup)
        await state.set_state(None)
    else:
        await message.answer(
            PROMOCODE_ERROR_TEXT,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="checkout")]
            ])
        )


@router.callback_query(F.data == "pay_with_yookassa")
async def pay_with_yookassa(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –ÆKassa")

    try:
        data = await state.get_data()
        logger.debug(f"pay_with_yookassa: –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ state –¥–ª—è user {user_id}: {data}")

        if 'item_count' not in data:
            logger.error(f"pay_with_yookassa: –ö–ª—é—á 'item_count' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ state –¥–ª—è user {user_id}. –î–∞–Ω–Ω—ã–µ: {data}")
            await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–∑–∏–Ω—É.", show_alert=True)
            return

        if 'cart_items' not in data or not data['cart_items']:
            logger.error(f"pay_with_yookassa: cart_items –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—É—Å—Ç—ã –¥–ª—è user {user_id}. –î–∞–Ω–Ω—ã–µ: {data}")
            await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–∑–∏–Ω—É.", show_alert=True)
            return

        total_price = data.get('total_price', 0)
        discounted_price = data.get('discounted_price', total_price)
        promocode = data.get('applied_promocode')
        discount = data.get('discount', 0)
        item_count = data['item_count']
        cart_items = data['cart_items']
        savings = total_price - discounted_price

        order_id = create_order(
            user_id=user_id,
            total_price=total_price,
            discounted_price=discounted_price,
            promocode=promocode,
            item_count=item_count,
            savings=savings
        )

        if not order_id:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", show_alert=True)
            return

        for item in cart_items:
            add_order_item(
                order_id=order_id,
                doc_id=item.get('doc_id', item.get('id', 0)),
                doc_name=item.get('doc_name', item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç')),
                price=item.get('price', 0),
                filled_data=item.get('filled_data', {}),
                price_type=item.get('price_type', "template")
            )

        if promocode:
            apply_promocode(promocode, user_id, order_id)

        payment_id = create_payment(
            user_id=user_id,
            order_id=order_id,
            amount=discounted_price,
            payment_system="yookassa",
            status="pending"
        )

        if not payment_id:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂", show_alert=True)
            return

        payment = create_payment(
            amount=discounted_price,
            description=f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id}",
            user_id=user_id
        )

        if not payment:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa", show_alert=True)
            return

        await state.update_data(yookassa_payment_id=payment.id, order_id=order_id)

        payment_text = YOOKASSA_PAYMENT_TEXT.format(total_price=discounted_price)
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment.confirmation.confirmation_url)],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ])

        await callback.message.edit_text(text=payment_text, parse_mode="HTML", reply_markup=markup)
        await state.set_state(PaymentStates.CHECKING_PAYMENT)
        await callback.answer()

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ pay_with_yookassa –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ–ø–ª–∞—Ç—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", show_alert=True)


@router.callback_query(F.data == "check_payment")
async def check_payment(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞")

    try:
        data = await state.get_data()
        yookassa_payment_id = data.get('yookassa_payment_id')
        order_id = data.get('order_id')

        if not yookassa_payment_id or not order_id:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–∞—Ç–µ–∂ –∏–ª–∏ –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–∞—Ç–µ–∂", show_alert=True)
            return

        status = check_payment_status(yookassa_payment_id)
        logger.info(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {yookassa_payment_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {status}")

        if status == "succeeded":
            update_payment_status(yookassa_payment_id, "succeeded")
            update_order_status(order_id, "paid")
            clear_cart(user_id)

            bot = callback.bot
            success = await process_successful_payment(
                bot=bot,
                user_id=user_id,
                order_id=order_id,
                cart_items=data.get('cart_items', [])
            )

            if success:
                await callback.message.edit_text(
                    text=PAYMENT_SUCCESS_TEXT,
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
                    ])
                )
            else:
                await callback.message.edit_text(
                    text="‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @biz_annet",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
                    ])
                )
            await state.clear()

        elif status == "canceled":
            update_payment_status(yookassa_payment_id, "canceled")
            update_order_status(order_id, "cancelled")
            await callback.message.edit_text(
                "‚ùå –û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
                ])
            )
            await state.clear()

        elif status == "waiting_for_capture":
            await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", show_alert=True)
        else:
            await callback.answer(f"‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}", show_alert=True)

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


@router.pre_checkout_query()
async def pre_checkout_query(pre_checkout_q: PreCheckoutQuery):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç {pre_checkout_q.from_user.id}")
    try:
        await pre_checkout_q.answer(ok=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
        await pre_checkout_q.answer(ok=False, error_message="‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")


@router.message(F.content_type == "successful_payment")
async def successful_payment(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑")

    try:
        data = await state.get_data()
        order_id = data.get('order_id')

        if not order_id:
            orders = get_user_orders(user_id)
            if orders:
                order_id = orders[0]['id']

        if not order_id:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã")
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –∑–∞–∫–∞–∑", reply_markup=None)
            return

        update_order_status(order_id, "paid")
        clear_cart(user_id)

        order = get_order_by_id(order_id)
        cart_items = order['items'] if order and 'items' in order else []

        bot = message.bot
        success = await process_successful_payment(bot=bot, user_id=user_id, order_id=order_id, cart_items=cart_items)

        if success:
            await message.answer(
                text=PAYMENT_SUCCESS_TEXT,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
                ])
            )
        else:
            await message.answer(
                text="‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @biz_annet",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
                ])
            )
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã", reply_markup=None)


async def process_successful_payment(bot: Bot, user_id: int, order_id: int, cart_items: list):
    try:
        logger.info(f"üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∑–∞–∫–∞–∑ {order_id}")
        documents = []
        generation_errors = []

        for item in cart_items:
            template_name = item.get('template_name', '')
            price_type = item.get('price_type', 'template')
            doc_name = item.get('doc_name', '–î–æ–∫—É–º–µ–Ω—Ç')
            logger.info(f"üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: —à–∞–±–ª–æ–Ω={template_name}, —Ç–∏–ø={price_type}")

            if price_type == "template":
                file_type = "sample"
                filled_data = {}
            else:
                file_type = "autogen"
                filled_data = item.get('filled_data', {})
                if not filled_data:
                    logger.error(f"‚ùå filled_data –¥–ª—è —à–∞–±–ª–æ–Ω–∞ {template_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")
                    generation_errors.append(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {doc_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    continue

            document_paths = generate_document(
                template_name=template_name,
                answers=filled_data,
                user_id=user_id,
                file_type=file_type
            )

            if document_paths:
                update_order_status(
                    order_id,
                    "paid",
                    pdf_path=document_paths.get('pdf'),
                    docx_path=document_paths.get('docx')
                )
                documents.append({
                    'pdf': document_paths.get('pdf'),
                    'docx': document_paths.get('docx'),
                    'name': doc_name
                })
                logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {doc_name}")
            else:
                error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_name}"
                logger.error(error_msg)
                generation_errors.append(error_msg)

        if not documents:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            update_order_status(order_id, "failed")
            error_text = "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</b>\n"
            if generation_errors:
                error_text += "–ü—Ä–∏—á–∏–Ω—ã:\n" + "\n".join(f"‚Ä¢ {err}" for err in generation_errors)
            error_text += "\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @biz_annet"
            await bot.send_message(chat_id=user_id, text=error_text, parse_mode="HTML")
            return False

        success = await send_generated_documents(bot, user_id, documents, order_id)
        if success:
            # ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ notifications.py
            order = get_order_by_id(order_id)
            total_price = order['total_price'] if order else sum(item.get('price', 0) for item in cart_items)
            discounted_price = order['discounted_price'] if order else total_price
            promocode = order['promocode'] if order else None

            await notify_support_about_new_order(
                bot=bot,
                order_id=order_id,
                user_id=user_id,
                cart_items=cart_items,
                total_price=total_price,
                discounted_price=discounted_price,
                promocode=promocode
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
            buttons = [[InlineKeyboardButton(text="‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="reviews")]]
            for i, doc in enumerate(documents, 1):
                if doc.get('pdf'):
                    buttons.append([InlineKeyboardButton(text=f"üîÑ {doc['name']} (PDF)", callback_data=f"download_pdf_{i}")])
                if doc.get('docx'):
                    buttons.append([InlineKeyboardButton(text=f"üîÑ {doc['name']} (DOCX)", callback_data=f"download_docx_{i}")])
            buttons.append([InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ", callback_data="send_all_documents")])
            buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")])
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)

            await bot.send_message(
                chat_id=user_id,
                text=(
                    "üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏</b>\n"
                    "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–Ω–æ–≤–æ.\n\n"
                    "<b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ–º - –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤! üëáüòä</b>"
                ),
                parse_mode="HTML",
                reply_markup=markup
            )
        return success

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã: {e}", exc_info=True)
        return False


async def send_generated_documents(bot: Bot, user_id: int, documents: list, order_id: int = None):
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        if not documents:
            logger.warning("–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return False

        sent_count = 0
        for i, doc in enumerate(documents, 1):
            doc_name = doc.get('name', f'–î–æ–∫—É–º–µ–Ω—Ç {i}')
            if doc.get('pdf') and os.path.exists(doc['pdf']):
                try:
                    await bot.send_document(
                        chat_id=user_id,
                        document=FSInputFile(path=doc['pdf'], filename=f"{doc_name}.pdf"),
                        caption=f"üìÑ {doc_name} (PDF)"
                    )
                    sent_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF: {e}")
            if doc.get('docx') and os.path.exists(doc['docx']):
                try:
                    await bot.send_document(
                        chat_id=user_id,
                        document=FSInputFile(path=doc['docx'], filename=f"{doc_name}.docx"),
                        caption=f"üìÑ {doc_name} (DOCX)"
                    )
                    sent_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ DOCX: {e}")

        if sent_count > 0:
            await bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã!</b>\n"
                     f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {sent_count}\n"
                     f"–ó–∞–∫–∞–∑ ‚Ññ{order_id or 'N/A'}\n"
                     f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @biz_annet",
                parse_mode="HTML"
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            await bot.send_message(chat_id=user_id, text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @biz_annet")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}", exc_info=True)
        return False