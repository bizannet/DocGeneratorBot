import logging
import os
from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from aiogram.fsm.context import FSMContext
from config import config
from database.orders import get_user_orders, get_order_by_id
from database.templates import get_template_by_id, get_template_by_name
from database.cart import add_to_cart
from database.users import save_user_data, get_user_data
from texts.messages import (
    ORDER_HISTORY_TEXT,
    REVIEW_DATA_TEXT,
    DOCUMENT_DESCRIPTION_TEXT,
    ORDER_DETAILS_TEXT
)
from services.document_generator import generate_document
from services.document_service import get_template_info
from services.file_utils import get_document_path

logger = logging.getLogger('doc_bot.order_history')
router = Router(name="order_history_router")


def format_order_date(date_str):
    try:
        for fmt in ["%Y-%m-%d %H:%M:%S", "%Y-%m-%d"]:
            try:
                date_obj = datetime.strptime(date_str, fmt)
                return date_obj.strftime("%d.%m.%Y")
            except (ValueError, TypeError):
                continue
        return date_str
    except Exception:
        return date_str


def format_order_status(status):
    status_map = {
        'created': '–°–æ–∑–¥–∞–Ω',
        'pending': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
        'paid': '–û–ø–ª–∞—á–µ–Ω',
        'processing': '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è',
        'completed': '–ì–æ—Ç–æ–≤',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω',
        'refunded': '–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤'
    }
    return status_map.get(status, status.capitalize())


def format_order_item(item):
    return f"‚Ä¢ {item['doc_name']} ‚Äî {item['price']} ‚ÇΩ"


def format_order(order):
    order_date = format_order_date(order['created_at'])

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
    status = format_order_status(order['status'])

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞
    items_text = "\n".join(format_order_item(item) for item in order['items'])

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
    total = order['total_price']
    if order.get('savings', 0) > 0:
        total_text = f"–ò—Ç–æ–≥–æ: <s>{total + order['savings']} ‚ÇΩ</s> <b>{total} ‚ÇΩ</b> (-{order['savings']} ‚ÇΩ)"
    else:
        total_text = f"–ò—Ç–æ–≥–æ: <b>{total} ‚ÇΩ</b>"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    order_text = (
        f"üì¶ <b>–ó–∞–∫–∞–∑ #{order['id']}</b>\n"
        f"üìÖ –î–∞—Ç–∞: {order_date}\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å: {status}\n\n"
        f"{items_text}\n\n"
        f"{total_text}"
    )

    return order_text


@router.callback_query(F.data == "order_history")
async def show_order_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        orders = get_user_orders(user_id)

        if not orders:
            await callback.message.edit_text(
                "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\n"
                "–ù–∞—á–Ω–∏—Ç–µ —Å –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ!",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥",
                            callback_data="catalog"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            callback_data="back_main"
                        )
                    ]
                ])
            )
            await callback.answer()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞–∫–∞–∑–æ–≤
        history_text = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤</b>\n\n"

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        orders.sort(key=lambda x: x['created_at'], reverse=True)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤
        for i, order in enumerate(orders[:10], 1):
            order_date = format_order_date(order['created_at'])
            status = format_order_status(order['status'])
            total = order['total_price']

            history_text += (
                f"{i}. #{order['id']} –æ—Ç {order_date}\n"
                f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}\n"
                f"   ‚Ä¢ –°—É–º–º–∞: {total} ‚ÇΩ\n\n"
            )

        if len(orders) > 10:
            history_text += "–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤.\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
        for order in orders[:5]:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
            order_date = format_order_date(order['created_at'])
            buttons.append([
                InlineKeyboardButton(
                    text=f"–ó–∞–∫–∞–∑ #{order['id']} –æ—Ç {order_date}",
                    callback_data=f"order_{order['id']}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
        buttons.append([
            InlineKeyboardButton(
                text="üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã",
                callback_data="show_all_orders"
            )
        ])
        buttons.append([
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back_main"
            )
        ])

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            text=history_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤", show_alert=True)
        await callback.answer()


@router.callback_query(F.data.startswith("order_"))
async def show_order_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ {order_id}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        order = get_order_by_id(order_id)

        if not order or order['user_id'] != user_id:
            await callback.answer("‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            await callback.answer()
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order_date = format_order_date(order['created_at'])
        status = format_order_status(order['status'])
        total = order['total_price']

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        documents_list = ""
        for i, item in enumerate(order['items'], 1):
            documents_list += f"{i}. {item['doc_name']}\n"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        formats = "PDF, DOCX"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
        order_text = ORDER_DETAILS_TEXT.format(
            order_id=order['id'],
            order_date=order_date,
            status=status,
            formats=formats,
            documents_list=documents_list,
            total_price=total
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        for i, item in enumerate(order['items'], 1):
            buttons.append([
                InlineKeyboardButton(
                    text=f"üìÑ {item['doc_name']}",
                    callback_data=f"doc_{item['doc_id']}_order_{order_id}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–µ—Å–ª–∏ –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω)
        if order['status'] == 'completed':
            buttons.append([
                InlineKeyboardButton(
                    text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑",
                    callback_data=f"reorder_{order_id}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if order['status'] == 'completed' and len(order['items']) > 0:
            buttons.append([
                InlineKeyboardButton(
                    text="üì• –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                    callback_data=f"download_all_{order_id}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        buttons.append([
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏—Å—Ç–æ—Ä–∏–∏",
                callback_data="order_history"
            )
        ])

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            text=order_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞", show_alert=True)
        await callback.answer()


@router.callback_query(F.data.startswith("doc_") & F.data.contains("_order_"))
async def show_order_document_options(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –∑–∞–∫–∞–∑–∞"""
    try:
        parts = callback.data.split("_")
        doc_id = int(parts[1])
        order_id = int(parts[3])

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc = get_template_by_id(doc_id)
        order = get_order_by_id(order_id)

        if not doc or not order:
            await callback.answer("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await callback.answer()
            return

        # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –∑–∞–∫–∞–∑–µ
        answers = None
        for item in order['items']:
            if item['doc_id'] == doc_id:
                answers = item['filled_data']
                break

        if not answers:
            await callback.answer("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            await callback.answer()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document_text = DOCUMENT_DESCRIPTION_TEXT.format(
            doc_name=doc['name'],
            description=doc['description'],
            price=doc['price']
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                    callback_data=f"review_{doc_id}_order_{order_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üì• –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç (PDF)",
                    callback_data=f"download_pdf_{doc_id}_order_{order_id}"
                ),
                InlineKeyboardButton(
                    text="üì• –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç (DOCX)",
                    callback_data=f"download_docx_{doc_id}_order_{order_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç",
                    callback_data=f"new_doc_{doc_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É",
                    callback_data=f"order_{order_id}"
                )
            ]
        ])

        await callback.message.edit_text(
            text=document_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ–ø—Ü–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await callback.answer()


@router.callback_query(F.data.startswith("review_") & F.data.contains("_order_"))
async def review_order_document(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –∑–∞–∫–∞–∑–∞"""
    try:
        parts = callback.data.split("_")
        doc_id = int(parts[1])
        order_id = int(parts[3])

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∏ –∑–∞–∫–∞–∑
        doc = get_template_by_id(doc_id)
        order = get_order_by_id(order_id)

        if not doc or not order:
            await callback.answer("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await callback.answer()
            return

        # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –∑–∞–∫–∞–∑–µ
        answers = None
        for item in order['items']:
            if item['doc_id'] == doc_id:
                answers = item['filled_data']
                break

        if not answers:
            await callback.answer("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            await callback.answer()
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_answers = ""
        for key, value in answers.items():
            formatted_answers += f"‚Ä¢ {key}: {value}\n"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        review_text = REVIEW_DATA_TEXT.format(
            doc_name=doc['name'],
            answers=formatted_answers
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üì• –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç (PDF)",
                    callback_data=f"download_pdf_{doc_id}_order_{order_id}"
                ),
                InlineKeyboardButton(
                    text="üì• –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç (DOCX)",
                    callback_data=f"download_docx_{doc_id}_order_{order_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç",
                    callback_data=f"new_doc_{doc_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"doc_{doc_id}_order_{order_id}"
                )
            ]
        ])

        await callback.message.edit_text(
            text=review_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        await callback.answer()


@router.callback_query(F.data.startswith("download_pdf_") & F.data.contains("_order_"))
async def download_pdf_document(callback: CallbackQuery):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∞—Ç—å PDF –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –∑–∞–∫–∞–∑–∞"""
    await download_order_document(callback, "pdf")


@router.callback_query(F.data.startswith("download_docx_") & F.data.contains("_order_"))
async def download_docx_document(callback: CallbackQuery):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∞—Ç—å DOCX –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –∑–∞–∫–∞–∑–∞"""
    await download_order_document(callback, "docx")


async def download_order_document(callback: CallbackQuery, format_type: str = "pdf"):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –∑–∞–∫–∞–∑–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ callback_data
        if format_type == "pdf" and "download_pdf_" in callback.data:
            parts = callback.data.replace("download_pdf_", "").split("_")
        elif format_type == "docx" and "download_docx_" in callback.data:
            parts = callback.data.replace("download_docx_", "").split("_")
        else:
            parts = callback.data.split("_")

        doc_id = int(parts[0])
        order_id = int(parts[2])

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∏ –∑–∞–∫–∞–∑
        doc = get_template_by_id(doc_id)
        order = get_order_by_id(order_id)

        if not doc or not order:
            await callback.answer("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await callback.answer()
            return

        # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –∑–∞–∫–∞–∑–µ
        answers = None
        for item in order['items']:
            if item['doc_id'] == doc_id:
                answers = item['filled_data']
                break

        if not answers:
            await callback.answer("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            await callback.answer()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        document_path = None
        if format_type == "pdf" and order.get('pdf_path'):
            document_path = order['pdf_path']
        elif format_type == "docx" and order.get('docx_path'):
            document_path = order['docx_path']

        # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if document_path and os.path.exists(document_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            await callback.message.answer_document(
                document=InputFile(document_path),
                caption=f"–í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç: {doc['name']} ({format_type.upper()})"
            )
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            document_paths = generate_document(
                template_name=doc['template_name'],
                answers=answers
            )

            if not document_paths or not document_paths.get(format_type):
                await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", show_alert=True)
                await callback.answer()
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            await callback.message.answer_document(
                document=InputFile(document_paths[format_type]),
                caption=f"–í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç: {doc['name']} ({format_type.upper()})"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –≤ –∑–∞–∫–∞–∑–µ
            if format_type == "pdf":
                order['pdf_path'] = document_paths['pdf']
            else:
                order['docx_path'] = document_paths['docx']

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞", show_alert=True)
        await callback.answer()


@router.callback_query(F.data.startswith("download_all_"))
async def download_all_order_documents(callback: CallbackQuery):
    try:
        order_id = int(callback.data.split("_")[2])
        user_id = callback.from_user.id
        order = get_order_by_id(order_id)

        if not order or order['user_id'] != user_id:
            await callback.answer("‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            await callback.answer()
            return

        for item in order['items']:
            doc = get_template_by_id(item['doc_id'])
            if not doc:
                continue

            pdf_path = item.get('pdf_path', '')
            docx_path = item.get('docx_path', '')

            if pdf_path and os.path.exists(pdf_path):
                await callback.message.answer_document(
                    document=InputFile(pdf_path),
                    caption=f"PDF: {doc['name']}"
                )

            if docx_path and os.path.exists(docx_path):
                await callback.message.answer_document(
                    document=InputFile(docx_path),
                    caption=f"DOCX: {doc['name']}"
                )

            if (not pdf_path or not os.path.exists(pdf_path)) and (not docx_path or not os.path.exists(docx_path)):
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
                document_paths = generate_document(
                    template_name=doc['template_name'],
                    answers=item['filled_data']
                )

                if document_paths:
                    if document_paths.get('pdf') and os.path.exists(document_paths['pdf']):
                        await callback.message.answer_document(
                            document=InputFile(document_paths['pdf']),
                            caption=f"PDF: {doc['name']}"
                        )

                    if document_paths.get('docx') and os.path.exists(document_paths['docx']):
                        await callback.message.answer_document(
                            document=InputFile(document_paths['docx']),
                            caption=f"DOCX: {doc['name']}"
                        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", show_alert=True)
        await callback.answer()


@router.callback_query(F.data.startswith("reorder_"))
async def reorder(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–≤—Ç–æ—Ä –∑–∞–∫–∞–∑–∞ {order_id}")

    try:
        order = get_order_by_id(order_id)

        if not order or order['user_id'] != user_id:
            await callback.answer("‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            await callback.answer()
            return

        for item in order['items']:
            template_info = get_template_info(item['template_name'])
            if template_info and 'price' in template_info and 'autogeneration' in template_info['price']:
                price = template_info['price']['autogeneration']

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
            add_to_cart(
                user_id=user_id,
                doc_id=item['doc_id'],
                name=item['doc_name'],
                price=price,
                template_name=item['template_name']
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            save_user_data(
                user_id=user_id,
                template_name=item['template_name'],
                filled_data=item['filled_data']
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        success_text = (
            "‚úÖ –ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞."
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É",
                    callback_data="view_cart"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üõçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏",
                    callback_data="catalog"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É",
                    callback_data=f"order_{order_id}"
                )
            ]
        ])

        await callback.message.edit_text(
            text=success_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ –∑–∞–∫–∞–∑–∞", show_alert=True)
        await callback.answer()


@router.callback_query(F.data == "show_all_orders")
async def show_all_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—Å–µ –∑–∞–∫–∞–∑—ã")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        orders = get_user_orders(user_id)

        if not orders:
            await callback.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤", show_alert=True)
            await callback.answer()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ –≤—Å–µ–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
        history_text = "üìú <b>–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤</b>\n\n"

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        orders.sort(key=lambda x: x['created_at'], reverse=True)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
        for i, order in enumerate(orders, 1):
            order_date = format_order_date(order['created_at'])
            status = format_order_status(order['status'])
            total = order['total_price']

            history_text += (
                f"{i}. #{order['id']} –æ—Ç {order_date}\n"
                f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}\n"
                f"   ‚Ä¢ –°—É–º–º–∞: {total} ‚ÇΩ\n\n"
            )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
        for order in orders[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
            order_date = format_order_date(order['created_at'])
            buttons.append([
                InlineKeyboardButton(
                    text=f"–ó–∞–∫–∞–∑ #{order['id']} –æ—Ç {order_date}",
                    callback_data=f"order_{order['id']}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
        buttons.append([
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="order_history"
            )
        ])

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            text=history_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤", show_alert=True)
        await callback.answer()