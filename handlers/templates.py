import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import config
from database.templates import (
    get_user_templates,
    create_user_template,
    get_user_template_by_id,
    update_user_template,
    delete_user_template
)
from texts.messages import (
    TEMPLATES_LIST_TEXT,
    NO_TEMPLATES_TEXT,
    TEMPLATE_MANAGEMENT_TEXT,
    DOCUMENT_DESCRIPTION_TEXT
)
from services.document_service import load_questions

logger = logging.getLogger('doc_bot.templates')
router = Router(name="templates_router")


class TemplateStates(StatesGroup):
    SELECTING_DOCUMENT = State()
    SELECTING_TEMPLATE_NAME = State()
    SAVING_TEMPLATE = State()
    EDITING_TEMPLATE = State()
    EDITING_FIELD = State()


@router.callback_query(F.data == "templates")
async def show_templates(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        templates = get_user_templates(user_id)

        if not templates:
            await callback.message.edit_text(
                NO_TEMPLATES_TEXT,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚ûï –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω",
                            callback_data="create_template"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            callback_data="back_main"
                        )
                    ]
                ])
            )
            await callback.answer()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        templates_text = TEMPLATES_LIST_TEXT

        # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω—ã
        for i, template in enumerate(templates, 1):
            templates_text += (
                f"{i}. <b>{template['name']}</b>\n"
                f"   ‚Ä¢ –¢–∏–ø: {template['document_type']}\n"
                f"   ‚Ä¢ –°–æ–∑–¥–∞–Ω: {template['created_at'].split(' ')[0]}\n\n"
            )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        for template in templates[:5]:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —à–∞–±–ª–æ–Ω–æ–≤
            buttons.append([
                InlineKeyboardButton(
                    text=f"üîñ {template['name']}",
                    callback_data=f"template_{template['id']}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
        buttons.append([
            InlineKeyboardButton(
                text="‚ûï –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω",
                callback_data="create_template"
            )
        ])
        buttons.append([
            InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data="templates"
            )
        ])
        buttons.append([
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back_main"
            )
        ])

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            text=templates_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤", show_alert=True)
        await callback.answer()


@router.callback_query(F.data.startswith("template_"))
async def show_template_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —à–∞–±–ª–æ–Ω–∞"""
    template_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ—Ç–∞–ª–∏ —à–∞–±–ª–æ–Ω–∞ {template_id}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
        template = get_user_template_by_id(user_id, template_id)

        if not template:
            await callback.answer("‚ö†Ô∏è –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await callback.answer()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        template_text = TEMPLATE_MANAGEMENT_TEXT.format(
            template_name=template['name'],
            document_type=template['document_type'],
            created_at=template['created_at'].split(' ')[0],
            updated_at=template['updated_at'].split(' ')[0]
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons = [
            [
                InlineKeyboardButton(
                    text="üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω",
                    callback_data=f"use_template_{template_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω",
                    callback_data=f"edit_template_{template_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω",
                    callback_data=f"delete_template_{template_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                    callback_data="templates"
                )
            ]
        ]

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            text=template_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π —à–∞–±–ª–æ–Ω–∞", show_alert=True)
        await callback.answer()


@router.callback_query(F.data == "create_template")
async def create_template_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞")

    try:
        text = (
            "üîñ <b>–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞:"
        )
        buttons = [
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="templates"
                )
            ]
        ]

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            text=text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await state.set_state(TemplateStates.SELECTING_TEMPLATE_NAME)
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await callback.answer()


@router.message(TemplateStates.SELECTING_TEMPLATE_NAME)
async def process_template_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞: {message.text}")

    try:
        await state.update_data(template_name=message.text)
        text = (
            "üîñ <b>–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞:"
        )
        buttons = [
            [
                InlineKeyboardButton(
                    text="–î–æ–≥–æ–≤–æ—Ä –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥",
                    callback_data="doc_type_service_contract"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
                    callback_data="doc_type_privacy_policy"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã",
                    callback_data="doc_type_rental_contract"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ê–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç",
                    callback_data="doc_type_work_act"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="templates"
                )
            ]
        ]

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer(
            text=text,
            parse_mode="HTML",
            reply_markup=markup
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=None)


@router.callback_query(F.data.startswith("doc_type_"))
async def select_document_type(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞")

    try:
        doc_type = callback.data.split("_")[2]
        await state.update_data(document_type=doc_type)

        text = (
            "üîñ <b>–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è."
        )

        buttons = [
            [
                InlineKeyboardButton(
                    text="üìù –ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ",
                    callback_data="start_template_filling"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="templates"
                )
            ]
        ]

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            text=text,
            parse_mode="HTML",
            reply_markup=markup
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(TemplateStates.SAVING_TEMPLATE)
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await callback.answer()


@router.callback_query(F.data == "start_template_filling")
async def start_template_filling(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞")

    try:
        data = await state.get_data()
        document_type = data.get('document_type', 'service_contract')
        questions = await load_questions(state, document_type)

        await state.update_data(
            questions=questions,
            current_question=0,
            answers={}
        )

        await ask_template_question(callback, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await callback.answer()


async def ask_template_question(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        questions = data.get('questions', [])
        current_question = data.get('current_question', 0)
        answers = data.get('answers', {})

        if current_question >= len(questions):
            await save_template(callback, state)
            return

        question = questions[current_question]
        question_text = (
            f"üîñ <b>–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            f"–í–æ–ø—Ä–æ—Å {current_question + 1}/{len(questions)}:\n\n"
            f"<b>{question['label']}</b>\n"
            f"{question['description']}"
        )

        buttons = []

        if current_question > 0:
            buttons.append([
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="prev_template_question"
                )
            ])

        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        buttons.append([
            InlineKeyboardButton(
                text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                callback_data="skip_template_question"
            )
        ])

        # –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
        buttons.append([
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="templates"
            )
        ])

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            text=question_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–¥–∞–≤–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await callback.answer()


@router.callback_query(F.data == "prev_template_question")
async def prev_template_question(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞"""
    data = await state.get_data()
    current_question = data.get('current_question', 0)

    if current_question > 0:
        await state.update_data(current_question=current_question - 1)

    await ask_template_question(callback, state)


@router.callback_query(F.data == "skip_template_question")
async def skip_template_question(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞"""
    data = await state.get_data()
    current_question = data.get('current_question', 0)

    await state.update_data(current_question=current_question + 1)

    await ask_template_question(callback, state)


@router.message(TemplateStates.SAVING_TEMPLATE)
async def process_template_answer(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞"""
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–∞–ª –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞")

    try:
        data = await state.get_data()
        questions = data.get('questions', [])
        current_question = data.get('current_question', 0)
        answers = data.get('answers', {})

        if current_question >= len(questions):
            await message.answer("‚ö†Ô∏è –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã", reply_markup=None)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        question = questions[current_question]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        answers[question["id"]] = message.text
        await state.update_data(answers=answers)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await state.update_data(current_question=current_question + 1)

        # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await ask_template_question(message, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=None)


async def ask_template_question(message: Message, state: FSMContext):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Message"""
    try:
        data = await state.get_data()
        questions = data.get('questions', [])
        current_question = data.get('current_question', 0)

        if current_question >= len(questions):
            await save_template(message, state)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        question = questions[current_question]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        question_text = (
            f"üîñ <b>–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            f"–í–æ–ø—Ä–æ—Å {current_question + 1}/{len(questions)}:\n\n"
            f"<b>{question['label']}</b>\n"
            f"{question['description']}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons = []

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        if current_question > 0:
            buttons.append([
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="prev_template_question"
                )
            ])

        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        buttons.append([
            InlineKeyboardButton(
                text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                callback_data="skip_template_question"
            )
        ])

        # –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
        buttons.append([
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="templates"
            )
        ])

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer(
            text=question_text,
            parse_mode="HTML",
            reply_markup=markup
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–¥–∞–≤–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=None)


async def save_template(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω"""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        template_name = data.get('template_name', '–ú–æ–π —à–∞–±–ª–æ–Ω')
        document_type = data.get('document_type', 'service_contract')
        answers = data.get('answers', {})

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        template_id = create_user_template(
            user_id=user_id,
            name=template_name,
            document_type=document_type,
            data=answers
        )

        if template_id:
            await callback.message.edit_text(
                f"‚úÖ –®–∞–±–ª–æ–Ω '{template_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîñ –ü–µ—Ä–µ–π—Ç–∏ –∫ —à–∞–±–ª–æ–Ω–∞–º",
                            callback_data="templates"
                        )
                    ]
                ])
            )
        else:
            await callback.message.edit_text(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîñ –ü–µ—Ä–µ–π—Ç–∏ –∫ —à–∞–±–ª–æ–Ω–∞–º",
                            callback_data="templates"
                        )
                    ]
                ])
            )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞", show_alert=True)
        await callback.answer()


@router.callback_query(F.data.startswith("use_template_"))
async def use_template(callback: CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    template_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —à–∞–±–ª–æ–Ω {template_id} –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
        template = get_user_template_by_id(user_id, template_id)

        if not template:
            await callback.answer("‚ö†Ô∏è –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await callback.answer()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            template_data=template['data'],
            template_name=template['name']
        )

        await callback.message.edit_text(
            f"üîñ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —à–∞–±–ª–æ–Ω: <b>{template['name']}</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìù –î–æ–≥–æ–≤–æ—Ä –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥",
                        callback_data="fill_service_contract"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìù –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
                        callback_data="fill_privacy_policy"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        callback_data="templates"
                    )
                ]
            ])
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await callback.answer()


@router.callback_query(F.data.startswith("edit_template_"))
async def edit_template(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
    template_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ {template_id}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
        template = get_user_template_by_id(user_id, template_id)

        if not template:
            await callback.answer("‚ö†Ô∏è –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await callback.answer()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —à–∞–±–ª–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            editing_template_id=template_id,
            template_name=template['name'],
            document_type=template['document_type'],
            current_question=0,
            answers=template['data']
        )

        questions = await load_questions(state, template['document_type'])

        await state.update_data(questions=questions)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(TemplateStates.EDITING_TEMPLATE)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await edit_template_question(callback, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await callback.answer()


async def edit_template_question(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    try:
        data = await state.get_data()
        questions = data.get('questions', [])
        current_question = data.get('current_question', 0)
        answers = data.get('answers', {})

        if current_question >= len(questions):
            await save_edited_template(callback, state)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        question = questions[current_question]
        current_answer = answers.get(question["id"], "")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        question_text = (
            f"üîñ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            f"–í–æ–ø—Ä–æ—Å {current_question + 1}/{len(questions)}:\n\n"
            f"<b>{question['label']}</b>\n"
            f"{question['description']}\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_answer if current_answer else '–Ω–µ –∑–∞–¥–∞–Ω–æ'}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons = []

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        if current_question > 0:
            buttons.append([
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="prev_edit_question"
                )
            ])

        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        buttons.append([
            InlineKeyboardButton(
                text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                callback_data="skip_edit_question"
            )
        ])

        # –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
        buttons.append([
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="templates"
            )
        ])

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            text=question_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤–æ–ø—Ä–æ—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await callback.answer()


@router.callback_query(F.data == "prev_edit_question")
async def prev_edit_question(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_question = data.get('current_question', 0)

    if current_question > 0:
        await state.update_data(current_question=current_question - 1)

    await edit_template_question(callback, state)


@router.callback_query(F.data == "skip_edit_question")
async def skip_edit_question(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_question = data.get('current_question', 0)

    await state.update_data(current_question=current_question + 1)

    await edit_template_question(callback, state)


@router.message(TemplateStates.EDITING_TEMPLATE)
async def process_edit_answer(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞"""
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–∞–ª –æ—Ç–≤–µ—Ç –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞")

    try:
        data = await state.get_data()
        questions = data.get('questions', [])
        current_question = data.get('current_question', 0)
        answers = data.get('answers', {})

        if current_question >= len(questions):
            await message.answer("‚ö†Ô∏è –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã", reply_markup=None)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        question = questions[current_question]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        answers[question["id"]] = message.text
        await state.update_data(answers=answers)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await state.update_data(current_question=current_question + 1)

        # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await edit_template_question(message, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=None)


async def edit_template_question(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        questions = data.get('questions', [])
        current_question = data.get('current_question', 0)
        answers = data.get('answers', {})

        if current_question >= len(questions):
            await save_edited_template(message, state)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        question = questions[current_question]
        current_answer = answers.get(question["id"], "")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        question_text = (
            f"üîñ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            f"–í–æ–ø—Ä–æ—Å {current_question + 1}/{len(questions)}:\n\n"
            f"<b>{question['label']}</b>\n"
            f"{question['description']}\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_answer if current_answer else '–Ω–µ –∑–∞–¥–∞–Ω–æ'}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons = []

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        if current_question > 0:
            buttons.append([
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="prev_edit_question"
                )
            ])

        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        buttons.append([
            InlineKeyboardButton(
                text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                callback_data="skip_edit_question"
            )
        ])

        # –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
        buttons.append([
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="templates"
            )
        ])

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer(
            text=question_text,
            parse_mode="HTML",
            reply_markup=markup
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤–æ–ø—Ä–æ—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=None)


async def save_edited_template(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω"""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        template_id = data.get('editing_template_id')
        answers = data.get('answers', {})

        if not template_id:
            await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —à–∞–±–ª–æ–Ω", show_alert=True)
            await callback.answer()
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = update_user_template(
            template_id=template_id,
            data=answers
        )

        if success:
            await callback.message.edit_text(
                "‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîñ –ü–µ—Ä–µ–π—Ç–∏ –∫ —à–∞–±–ª–æ–Ω–∞–º",
                            callback_data="templates"
                        )
                    ]
                ])
            )
        else:
            await callback.message.edit_text(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîñ –ü–µ—Ä–µ–π—Ç–∏ –∫ —à–∞–±–ª–æ–Ω–∞–º",
                            callback_data="templates"
                        )
                    ]
                ])
            )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞", show_alert=True)
        await callback.answer()


@router.callback_query(F.data.startswith("delete_template_"))
async def delete_template(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç —à–∞–±–ª–æ–Ω"""
    template_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—è–µ—Ç —à–∞–±–ª–æ–Ω {template_id}")

    try:
        # –£–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω
        success = delete_user_template(user_id, template_id)

        if success:
            await callback.answer("‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", show_alert=True)
        else:
            await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω", show_alert=True)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
        await show_templates(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞", show_alert=True)
        await callback.answer()