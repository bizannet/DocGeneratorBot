import logging
import json
import re
import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import config
from database.users import (
    get_all_users, get_user_by_id, get_user_referrals, get_partner_stats,
    get_new_users_count, get_news_subscribers
)
from database.orders import (
    get_all_orders, get_order_by_id_full, update_order_status as db_update_order_status,
    get_orders_stats
)
from database.promocodes import (
    get_all_promocodes, get_promocode_by_code, create_promocode as db_create_promocode
)
from database.templates import get_all_templates, create_template as db_create_template
from database.cart import get_cart_items
from services.pricing import (
    get_template_price, get_autogeneration_price, update_price_in_db, get_price_for_type
)
from services.notifications import (
    send_daily_stats_report, send_monthly_stats_report, send_yearly_stats_report
)
from services.file_utils import get_logs_path
from texts.messages import ADMIN_PANEL_TEXT

logger = logging.getLogger('doc_bot.admin')
router = Router(name="admin_router")

class AdminStates(StatesGroup):
    WAITING_FOR_ORDER_SEARCH = State()
    CREATING_TEMPLATE = State()
    ENTERING_TEMPLATE_CATEGORY = State()
    ENTERING_TEMPLATE_PRICE = State()
    CREATING_PROMOCODE = State()
    ENTERING_PROMOCODE_DISCOUNT = State()
    WAITING_FOR_REPLY = State()
    SEARCHING_ORDER = State()
    EDITING_PRICE = State()
    WAITING_FOR_BROADCAST = State()

def is_admin(user_id: int) -> bool:
    try:
        return user_id in config.ADMIN_IDS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

def format_admin_stats():
    orders = get_all_orders()
    users = get_all_users()

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_orders = len(orders)
    total_users = len(users)

    # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    active_statuses = ['pending', 'processing', 'paid']
    active_orders = sum(1 for order in orders if order['status'] in active_statuses)

    # –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞
    total_revenue = sum(order.get('total_price', 0) for order in orders if order['status'] == 'paid')

    # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
    week_ago = datetime.datetime.now() - datetime.timedelta(days=7)
    new_users = 0
    for user in users:
        try:
            reg_date_str = user.get('registered_at')
            if reg_date_str:
                reg_date = datetime.datetime.strptime(reg_date_str, "%Y-%m-%d %H:%M:%S")
                if reg_date > week_ago:
                    new_users += 1
        except (ValueError, TypeError) as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('id')}: {e}")
            continue

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = (
        f"üìä <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"üÜï –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <b>{new_users}</b>\n"
        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>{total_orders}</b>\n"
        f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: <b>{active_orders}</b>\n"
        f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: <b>{total_revenue:.2f} ‚ÇΩ</b>\n"
        "<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</i>"
    )
    return stats_text

def get_admin_menu():
    buttons = [
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        ],
        [
            InlineKeyboardButton(text="üè∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏", callback_data="admin_prices")
        ],
        [
            InlineKeyboardButton(text="üì¶ –ó–∞–∫–∞–∑—ã", callback_data="admin_orders"),
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton(text="üìë –î–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="admin_templates"),
            InlineKeyboardButton(text="üéü –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promocodes")
        ],
        [
            InlineKeyboardButton(text="üì§ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_newsletter")
        ],
        [
            InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_main")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_stats_menu():
    buttons = [
        [
            InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="stats_daily"),
            InlineKeyboardButton(text="üìÜ –ù–µ–¥–µ–ª—è", callback_data="stats_week")
        ],
        [
            InlineKeyboardButton(text="üóì –ú–µ—Å—è—Ü", callback_data="stats_monthly"),
            InlineKeyboardButton(text="üßæ –ì–æ–¥", callback_data="stats_yearly")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.callback_query(F.data == "admin_panel")
async def admin_panel(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")

    if not is_admin(user_id):
        await callback.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        stats_text = format_admin_stats()
        markup = get_admin_menu()

        await callback.message.edit_text(
            text=stats_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", show_alert=True)

@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

    if not is_admin(user_id):
        await callback.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
            "<i>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</i>"
        )
        markup = get_stats_menu()

        await callback.message.edit_text(
            text=stats_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

@router.callback_query(F.data == "admin_orders")
async def admin_orders(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")

    if not is_admin(user_id):
        await callback.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try: # –î–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫ try-except
        orders = get_all_orders(limit=10)
        if not orders:
            await callback.message.edit_text(
                "üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</b>\n"
                "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑", callback_data="search_order")],
                    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_orders")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
                ])
            )
            await callback.answer() # –î–æ–±–∞–≤–ª–µ–Ω await callback.answer()
            return

        orders_text = "üì¶ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã</b>\n\n"
        for order in orders:
            order_id = order.get('id', 'N/A')
            user_id_order = order.get('user_id', 'N/A')
            status = order.get('status', 'N/A')
            total_price = order.get('total_price', 0)
            orders_text += (
                f"–ó–∞–∫–∞–∑ #{order_id}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id_order}\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n"
                f"–°—É–º–º–∞: {total_price} ‚ÇΩ\n\n"
            )

        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑", callback_data="search_order")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_orders")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])

        await callback.message.edit_text(
            text=orders_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer()
    except Exception as e: # –î–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫ except
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤", show_alert=True)

@router.callback_query(F.data == "search_order")
async def search_order_start(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞")

    if not is_admin(user_id):
        await callback.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_orders")]
        ])
    )
    await state.set_state(AdminStates.SEARCHING_ORDER)
    await callback.answer()

@router.message(AdminStates.SEARCHING_ORDER)
async def search_order_process(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª ID –∑–∞–∫–∞–∑–∞: {message.text}")

    if not is_admin(user_id):
        await message.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", reply_markup=None)
        return

    try:
        order_id = int(message.text)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞", reply_markup=None)
        # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        return

    try:
        order = get_order_by_id_full(order_id)
        if not order:
            await message.answer("‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=None)
            await state.clear()
            return

        order_text = (
            f"üì¶ <b>–ó–∞–∫–∞–∑ #{order['id']}</b>\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order['user_id']}\n"
            f"–°—Ç–∞—Ç—É—Å: {order['status']}\n"
            f"–°—É–º–º–∞: {order.get('total_price', 0)} ‚ÇΩ\n"
            f"–î–∞—Ç–∞: {order.get('created_at', 'N/A')}\n\n"
            "<b>–ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞:</b>\n"
        )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ 'items' –≤ order –∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        if 'items' in order and isinstance(order['items'], list):
            for item in order['items']:
                order_text += f"- {item.get('doc_name', 'N/A')} - {item.get('price', 0)} ‚ÇΩ\n"
        else:
            order_text += "–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –≤ –∑–∞–∫–∞–∑–µ.\n"

        # –ö–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        status_buttons = [
            [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—á–µ–Ω", callback_data=f"change_status_{order['id']}_paid")],
            [InlineKeyboardButton(text="üì¶ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ", callback_data=f"change_status_{order['id']}_processing")],
            [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω", callback_data=f"change_status_{order['id']}_sent")],
            [InlineKeyboardButton(text="‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", callback_data=f"change_status_{order['id']}_delivered")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–µ–Ω", callback_data=f"change_status_{order['id']}_cancelled")]
        ]
        status_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_orders")])

        markup = InlineKeyboardMarkup(inline_keyboard=status_buttons)

        await message.answer(
            text=order_text,
            parse_mode="HTML",
            reply_markup=markup
        )
    except Exception as e: # –î–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫ except
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ/–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id}: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–∞", reply_markup=None)
    finally:
         await state.clear()

@router.callback_query(F.data.startswith("change_status_"))
async def change_order_status(callback: CallbackQuery):
    """–ò–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞")

    if not is_admin(user_id):
        await callback.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        parts = callback.data.split("_")
        if len(parts) < 4:
            await callback.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å", show_alert=True)
            return

        order_id = int(parts[2])
        new_status = parts[3]

        success = db_update_order_status(order_id, new_status)
        if success:
            await callback.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'", show_alert=True)
            await admin_orders(callback) # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
        else:
            await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", show_alert=True)
    except (ValueError, IndexError) as e: # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await callback.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)


@router.callback_query(F.data == "admin_prices")
async def admin_prices(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏")

    if not is_admin(user_id):
        await callback.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        template_price = get_template_price()
        autogen_price = get_autogeneration_price()

        prices_text = (
            "üè∑ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏</b>\n"
            f"‚Ä¢ –®–∞–±–ª–æ–Ω: <b>{template_price}</b> ‚ÇΩ\n"
            f"‚Ä¢ –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è: <b>{autogen_price}</b> ‚ÇΩ\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        )

        markup = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úèÔ∏è –¶–µ–Ω–∞ –∑–∞ —à–∞–±–ª–æ–Ω", callback_data="edit_price_template"),
                InlineKeyboardButton(text="‚úèÔ∏è –¶–µ–Ω–∞ –∑–∞ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="edit_price_autogen")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
            ]
        ])

        await callback.message.edit_text(
            text=prices_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ü–µ–Ω: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–Ω", show_alert=True)

@router.callback_query(F.data.startswith("edit_price_"))
async def start_editing_price(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–∂–µ –≤–Ω—É—Ç—Ä–∏ is_admin
    if not is_admin(user_id):
        await callback.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try: # –î–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫ try-except
        data = callback.data
        service_type = data.replace("edit_price_", "")
        if service_type not in ["template", "autogen"]:
            await callback.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å", show_alert=True)
            return

        await state.set_state(AdminStates.EDITING_PRICE)
        await state.update_data(service_type=service_type)

        price_name = "—à–∞–±–ª–æ–Ω–∞" if service_type == "template" else "–∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
        await callback.message.edit_text(
            text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è <b>{price_name}</b> (–≤ —Ä—É–±–ª—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, 25.7):",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_prices")]
            ])
        )
        await callback.answer()
    except Exception as e: # –î–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫ except
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(AdminStates.EDITING_PRICE)
async def process_new_price(message: Message, state: FSMContext):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–∂–µ –≤–Ω—É—Ç—Ä–∏ is_admin
    if not is_admin(user_id):
        await message.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", reply_markup=None)
        await state.clear()
        return

    try:
        new_price_input = message.text.strip()
        new_price_float = float(new_price_input)
        if new_price_float < 0:
            await message.answer("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:")
            return
        new_price = int(new_price_float)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.7):")
        return

    try:
        data = await state.get_data()
        service_type = data.get('service_type')

        success = update_price_in_db(service_type, new_price)

        if success:
            template_price = get_template_price()
            autogen_price = get_autogeneration_price()
            price_name = "—à–∞–±–ª–æ–Ω–∞" if service_type == "template" else "–∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
            prices_text = (
                "üè∑ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏</b>\n"
                f"‚Ä¢ –®–∞–±–ª–æ–Ω: <b>{template_price}</b> ‚ÇΩ\n"
                f"‚Ä¢ –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è: <b>{autogen_price}</b> ‚ÇΩ\n"
                f"‚úÖ –¶–µ–Ω–∞ –¥–ª—è <b>{price_name}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ <b>{new_price}</b> ‚ÇΩ"
            )
            await message.answer(text=prices_text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
            ]))
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    except Exception as e: # –î–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫ except
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã –≤ –ë–î: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    finally:
        await state.clear()

@router.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    if not is_admin(user_id):
        await callback.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        users = get_all_users()
        if not users:
            await callback.message.edit_text(
                "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n"
                "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_users")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
                ])
            )
            await callback.answer()
            return

        users_text = "üë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n"
        for user in users[:10]:
            users_text += (
                f"ID: {user.get('id', 'N/A')}\n"
                f"–ò–º—è: {user.get('first_name', 'N/A')}\n"
                f"Username: @{user.get('username', 'N/A')}\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.get('registered_at', 'N/A')}\n\n"
            )

        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_users")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])

        await callback.message.edit_text(
            text=users_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)

@router.callback_query(F.data == "admin_templates")
async def admin_templates(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏")

    if not is_admin(user_id):
        await callback.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        templates = get_all_templates()

        if not templates:
            await callback.message.edit_text(
                "üìë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏</b>\n"
                "–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="create_template")],
                    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_templates")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
                ])
            )
            await callback.answer()
            return

        templates_text = "üìë <b>–®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</b>\n\n"
        for template in templates:
            template_id = template.get('id', 'N/A')
            name = template.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            category = template.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
            price = template.get('price', template.get('template_price', 0))
            templates_text += (
                f"ID: {template_id}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                f"–¶–µ–Ω–∞: {price} ‚ÇΩ\n\n"
            )

        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="create_template")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_templates")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])

        await callback.message.edit_text(
            text=templates_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤", show_alert=True)

@router.callback_query(F.data == "create_template")
async def create_template_start(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞")
    if not is_admin(user_id):
        await callback.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        await callback.message.edit_text(
            "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_templates")]
            ])
        )
        await state.set_state(AdminStates.CREATING_TEMPLATE)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(AdminStates.CREATING_TEMPLATE)
async def process_template_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞: {message.text}")

    if not is_admin(user_id):
        await message.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", reply_markup=None)
        await state.clear()
        return

    try:
        await state.update_data(template_name=message.text)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —à–∞–±–ª–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, business, realestate):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_templates")]
            ])
        )
        await state.set_state(AdminStates.ENTERING_TEMPLATE_CATEGORY)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=None)
        await state.clear()

@router.message(AdminStates.ENTERING_TEMPLATE_CATEGORY)
async def process_template_category(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é —à–∞–±–ª–æ–Ω–∞: {message.text}")

    if not is_admin(user_id):
        await message.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", reply_markup=None)
        await state.clear()
        return

    try:
        await state.update_data(template_category=message.text.lower()) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —à–∞–±–ª–æ–Ω–∞ (–≤ —Ä—É–±–ª—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, 25.7):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_templates")]
            ])
        )
        await state.set_state(AdminStates.ENTERING_TEMPLATE_PRICE)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=None)
        await state.clear()

@router.message(AdminStates.ENTERING_TEMPLATE_PRICE)
async def process_template_price(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª —Ü–µ–Ω—É —à–∞–±–ª–æ–Ω–∞: {message.text}")

    if not is_admin(user_id):
        await message.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", reply_markup=None)
        await state.clear()
        return

    try:
        price_input = message.text.strip()
        price_float = float(price_input)
        if price_float < 0:
            await message.answer("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:")
            return
        price = int(price_float)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.7):")
        return

    try:
        data = await state.get_data()
        name = data.get('template_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        category = data.get('template_category', 'unknown')
        success = db_create_template(name, category, price)

        if success:
            await message.answer(
                f"‚úÖ –®–∞–±–ª–æ–Ω '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å —Ü–µ–Ω–æ–π {price} ‚ÇΩ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–±–ª–æ–Ω–∞–º", callback_data="admin_templates")]
                ])
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    except Exception as e: # –î–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫ except
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    finally:
        await state.clear()

@router.callback_query(F.data == "admin_promocodes")
async def admin_promocodes(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏")

    if not is_admin(user_id):
        await callback.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        promocodes = get_all_promocodes()

        if not promocodes:
            await callback.message.edit_text(
                "üéü <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏</b>\n"
                "–ù–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="create_promocode")],
                    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_promocodes")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
                ])
            )
            await callback.answer()
            return

        promocodes_text = "üéü <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã</b>\n\n"
        for promocode in promocodes:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get() –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è KeyError –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã
            code = promocode.get('code', 'N/A')
            discount = promocode.get('discount', 0)
            used_count = promocode.get('used_count', 0)
            max_uses = promocode.get('max_uses', 0)
            expires_at = promocode.get('expires_at', 'N/A')
            promocodes_text += (
                f"–ö–æ–¥: <code>{code}</code>\n"
                f"–°–∫–∏–¥–∫–∞: {discount}%\n"
                f" –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {used_count}/{max_uses}\n"
                f" –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_at}\n\n"
            )

        buttons = [
            [
                InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="create_promocode")
            ],
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_promocodes")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
            ]
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            text=promocodes_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", show_alert=True)

@router.callback_query(F.data == "create_promocode")
async def create_promocode_start(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞")

    if not is_admin(user_id):
        await callback.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        await callback.message.edit_text(
            "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_promocodes")]
            ])
        )
        await state.set_state(AdminStates.CREATING_PROMOCODE)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(AdminStates.CREATING_PROMOCODE)
async def process_promocode_code(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {message.text}")
    if not is_admin(user_id):
        await message.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", reply_markup=None)
        await state.clear()
        return

    try:
        await state.update_data(promocode_code=message.text.upper())
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_promocodes")]
            ])
        )
        await state.set_state(AdminStates.ENTERING_PROMOCODE_DISCOUNT)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=None)
        await state.clear()

@router.message(AdminStates.ENTERING_PROMOCODE_DISCOUNT)
async def process_promocode_discount(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª —Å–∫–∏–¥–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–∞: {message.text}")
    if not is_admin(user_id):
        await message.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", reply_markup=None)
        await state.clear()
        return

    try:
        try:
            discount = int(message.text)
            if discount <= 0 or discount > 100:
                raise ValueError("–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100")
        except (ValueError, TypeError) as ve:
            await message.answer(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: {ve}. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_promocodes")]
                ])
            )
            return # –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–∑–≤–æ–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥

        data = await state.get_data()
        code = data.get('promocode_code')
        success = db_create_promocode(code, "percent", discount, 30, 100)

        if success:
            await message.answer(
                f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{code}</code> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å–æ —Å–∫–∏–¥–∫–æ–π {discount}%",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º", callback_data="admin_promocodes")]
                ])
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞", reply_markup=None)
    finally:
        await state.clear()

@router.callback_query(F.data == "admin_newsletter")
async def admin_newsletter(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏")

    if not is_admin(user_id):
        await callback.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        await callback.message.edit_text(
            "üì§ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
            ])
        )
        await state.set_state(AdminStates.WAITING_FOR_BROADCAST)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(AdminStates.WAITING_FOR_BROADCAST)
async def process_broadcast_message(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")

    if not is_admin(user_id):
        await message.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", reply_markup=None)
        await state.clear()
        return

    try:
        await state.update_data(broadcast_text=message.text)

        markup = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_broadcast"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
            ]
        ])

        await message.answer(
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –û—Ç–ø—Ä–∞–≤–∏—Ç—å?",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=None)
        await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

@router.callback_query(F.data == "send_broadcast")
async def confirm_broadcast(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É")

    if not is_admin(user_id):
        await callback.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        data = await state.get_data()
        text = data.get('broadcast_text')

        if not text:
            await callback.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", show_alert=True)
            await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            return

        subscribers = get_news_subscribers()

        if not subscribers:
             await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
                ])
            )
             await state.clear()
             return


        success_count = 0
        fail_count = 0

        for user_id_sub in subscribers:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
                await callback.send_message(chat_id=user_id_sub, text=text, parse_mode="HTML")
                success_count += 1
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram API
                # import asyncio
                # await asyncio.sleep(0.1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_sub}: {e}")
                fail_count += 1

        await callback.message.edit_text(
            f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {fail_count}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
            ])
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ", show_alert=True)
        # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    finally:
        await state.clear()

@router.callback_query(F.data == "cancel_broadcast")
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])
    )
    await callback.answer()

@router.message(F.text.startswith("/stats"))
async def handle_stats_request(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if str(message.chat.id) != str(config.SUPPORT_CHAT_ID):
        return

    is_user_admin = False
    sender_id = message.from_user.id
    if is_admin(sender_id):
         is_user_admin = True

    if not is_user_admin:
        return

    try:
        command = message.text.strip().lower()
        if "/stats daily" in command or "/stats day" in command:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await send_daily_stats_report()
            await message.reply("üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É.")
        elif "/stats monthly" in command or "/stats month" in command:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await send_monthly_stats_report()
            await message.reply("üìä –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É.")
        elif "/stats yearly" in command or "/stats year" in command:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–¥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await send_yearly_stats_report()
            await message.reply("üìä –ì–æ–¥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É.")
        elif "/stats" in command:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = get_orders_stats()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π –≤ stats
            total_orders = stats.get('total_orders', 0)
            total_revenue = stats.get('total_revenue', 0.0)
            stats_text = (
                f"üìä –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
                f"–í—ã—Ä—É—á–∫–∞: {total_revenue:.2f} ‚ÇΩ"
            )
            await message.reply(stats_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /stats –≤ –≥—Ä—É–ø–ø–µ: {e}", exc_info=True)
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")

@router.message(F.text.startswith("/promocodes"))
async def handle_promocodes_request(message: Message):
     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if str(message.chat.id) != str(config.SUPPORT_CHAT_ID):
        return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑ —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
    is_user_admin = False
    sender_id = message.from_user.id
    if is_admin(sender_id):
         is_user_admin = True

    if not is_user_admin:
        return

    try:
        promocodes = get_all_promocodes()
        if not promocodes:
            await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")
            return

        promocodes_text = "üéü –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n"
        for promocode in promocodes:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get() –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è KeyError
            code = promocode.get('code', 'N/A')
            discount = promocode.get('discount', 0)
            used_count = promocode.get('used_count', 0)
            max_uses = promocode.get('max_uses', 0)
            remaining = max_uses - used_count
            promocodes_text += f"- {code}: {discount}% (–æ—Å—Ç–∞–ª–æ—Å—å {remaining} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π)\n"

        await message.reply(promocodes_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /promocodes –≤ –≥—Ä—É–ø–ø–µ: {e}", exc_info=True)
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")