import logging
import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from pathlib import Path
from config import config
from services.document_service import get_templates_from_filesystem, get_template_by_id_from_filesystem, \
    get_template_info
from services.pricing import get_template_price, get_autogeneration_price
from texts.messages import (
    CATALOG_TEXT,
    BUSINESS_DOCUMENTS_TEXT,
    REALESTATE_DOCUMENTS_TEXT,
    LOGISTICS_DOCUMENTS_TEXT,
    WEBSITE_DOCUMENTS_TEXT,
    CART_TEXT,
    DOCUMENT_DESCRIPTION_TEXT
)
from database.cart import add_to_cart, get_user_cart, clear_cart, remove_from_cart

logger = logging.getLogger('doc_bot.catalog')
router = Router(name="catalog_router")

CATEGORIES = {
    "business": {
        "text": BUSINESS_DOCUMENTS_TEXT,
        "name": "–î–ª—è –±–∏–∑–Ω–µ—Å–∞",
        "icon": "üè¢"
    },
    "logistics": {
        "text": LOGISTICS_DOCUMENTS_TEXT,
        "name": "–î–ª—è –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–æ–∫",
        "icon": "üöõ"
    },
    "realestate": {
        "text": REALESTATE_DOCUMENTS_TEXT,
        "name": "–î–ª—è –∞—Ä–µ–Ω–¥—ã",
        "icon": "üè†"
    },
    "website": {
        "text": WEBSITE_DOCUMENTS_TEXT,
        "name": "–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–∞–π—Ç–∞",
        "icon": "üíª"
    }
}


def format_item_count(count: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º"""
    if count % 10 == 1 and count % 100 != 11:
        return f"{count} –¥–æ–∫—É–º–µ–Ω—Ç"
    elif 2 <= count % 10 <= 4 and (count % 100 < 10 or count % 100 >= 20):
        return f"{count} –¥–æ–∫—É–º–µ–Ω—Ç–∞"
    else:
        return f"{count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"


def format_cart_items(items: list) -> str:
    items_list = ""
    for i, item in enumerate(items, 1):
        doc_type = "—à–∞–±–ª–æ–Ω"
        if item.get('price_type') == 'autogen':
            doc_type = "–∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è"

        price = item['price']
        items_list += f"{i}. {item['doc_name']} ({doc_type}) - {price} ‚ÇΩ\n"
    return items_list


@router.callback_query(F.data == "catalog")
async def show_catalog(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–ª –∫–∞—Ç–∞–ª–æ–≥")

    try:
        buttons = []
        for category_key, category_info in CATEGORIES.items():
            buttons.append([
                InlineKeyboardButton(
                    text=f"{category_info['icon']} {category_info['name']}",
                    callback_data=f"category_{category_key}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        buttons.append([
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back_main"
            )
        ])

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º
        await callback.message.edit_text(
            text=CATALOG_TEXT,
            reply_markup=markup,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞", show_alert=True)
        await callback.answer()


@router.callback_query(F.data.startswith("category_"))
async def show_category(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback.data.split("_")[1]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}")

    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    templates = get_templates_from_filesystem(category)

    if not templates:
        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...")

        contracts_path = Path(config.DOCUMENTS_PATH) / "templates" / "contracts"
        website_path = Path(config.DOCUMENTS_PATH) / "templates" / "website"

        logger.warning(f"–ü—É—Ç—å –∫ DOCUMENTS_PATH: {config.DOCUMENTS_PATH}")
        logger.warning(f"–ü—É—Ç—å –∫ templates/contracts —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {contracts_path.exists()}")
        logger.warning(f"–ü—É—Ç—å –∫ templates/website —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {website_path.exists()}")

        if contracts_path.exists():
            logger.warning(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ contracts: {[str(p) for p in contracts_path.iterdir()]}")
        if website_path.exists():
            logger.warning(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ website: {[str(p) for p in website_path.iterdir()]}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —à–∞–±–ª–æ–Ω—ã –≤ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        for test_category in ["business", "logistics", "realestate", "website"]:
            test_templates = get_templates_from_filesystem(test_category)
            logger.warning(f"–ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {test_category}: {len(test_templates)}")

        await callback.message.edit_text(
            f"‚ö†Ô∏è –ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="catalog")]
            ])
        )
        return

    buttons = []
    for template in templates:
        buttons.append([
            InlineKeyboardButton(
                text=f"üìÑ {template['name']}",
                callback_data=f"doc_{category}_{template['id']}"
            )
        ])

    buttons.append([
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="catalog"
        )
    ])

    category_texts = {
        "business": BUSINESS_DOCUMENTS_TEXT,
        "logistics": LOGISTICS_DOCUMENTS_TEXT,
        "realestate": REALESTATE_DOCUMENTS_TEXT,
        "website": WEBSITE_DOCUMENTS_TEXT
    }

    category_text = category_texts.get(category, f"–î–æ–∫—É–º–µ–Ω—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")

    await callback.message.edit_text(
        text=category_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("doc_"))
async def show_document(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –¥–æ–∫—É–º–µ–Ω—Ç")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        parts = callback.data.split("_")
        if len(parts) < 3:  # –û–∂–∏–¥–∞–µ–º –∫–∞–∫ –º–∏–Ω–∏–º—É–º 3 —á–∞—Å—Ç–∏: doc_category_id
            await callback.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å", show_alert=True)
            await callback.answer()
            return

        category_key = parts[1]
        doc_id = "_".join(parts[2:])

        template = get_template_by_id_from_filesystem(category_key, doc_id)

        if not template:
            await callback.answer("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await callback.answer()
            return

        template_info = get_template_info(template['template_name'], category_key)

        description = "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞."
        if 'description' in template_info and template_info['description']:
            description = template_info['description']
        elif 'description' in template and template['description']:
            description = template['description']

        document_text = DOCUMENT_DESCRIPTION_TEXT.format(
            doc_name=template['name'],
            description=description,
            template_price=template_info['price']['template'],
            autogen_price=template_info['price']['autogen']
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìù –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è",
                    callback_data=f"fill_{category_key}_{doc_id}_autogen"
                ),
                InlineKeyboardButton(
                    text="üì• –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É",
                    callback_data=f"add_{category_key}_{doc_id}_template"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"category_{category_key}"
                ),
                InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_main"
                )
            ]
        ])

        await callback.message.edit_text(
            text=document_text,
            reply_markup=markup,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞", show_alert=True)
        await callback.answer()


@router.callback_query(F.data.startswith("add_"))
async def add_to_cart_handler(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –¥–æ–±–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        parts = callback.data.split("_")
        if len(parts) < 4:  # –û–∂–∏–¥–∞–µ–º 4 —á–∞—Å—Ç–∏: add_category_id_type
            await callback.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å", show_alert=True)
            await callback.answer()
            return

        category_key = parts[1]
        # ID –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        doc_id = "_".join(parts[2:-1])
        price_type = parts[-1]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        template = get_template_by_id_from_filesystem(category_key, doc_id)

        if not template:
            await callback.answer("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await callback.answer()
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ
        template_info = get_template_info(template['template_name'], category_key)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if price_type == 'autogen':
            price = template_info['price']['autogen']
        else:  # 'template'
            price = template_info['price']['template']

        now = datetime.datetime.now()
        suffix = now.strftime("%d.%m/%H:%M")
        cart_item_id = f"{template['template_name']}__{suffix}"

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π –∏ —Ç–∏–ø–æ–º
        document = {
            'id': template['id'],
            'doc_name': template['name'],
            'category': template['category'],
            'description': template['description'],
            'template_name': template['template_name'],
            'price': price,
            'price_type': price_type,
            'filled_data': {}
        }

        add_to_cart(
            user_id=callback.from_user.id,
            cart_item_id=cart_item_id,
            doc_id=template['id'],
            doc_name=template['name'],
            category=template['category'],
            template_name=template['template_name'],
            price=price,
            price_type=price_type,
            filled_data={}
        )

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
        cart = get_user_cart(callback.from_user.id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        items_list = format_cart_items(cart['items'])

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º
        item_count_str = format_item_count(cart['item_count'])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ—Ä–∑–∏–Ω—ã
        cart_text = CART_TEXT.format(
            items_list=items_list,
            item_count=item_count_str,
            total_price=cart['total']
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
                    callback_data="checkout"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üõçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏",
                    callback_data="catalog"
                )
            ]
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
        for i, item in enumerate(cart['items'], 1):
            buttons.append([
                InlineKeyboardButton(
                    text=f"üóë –û—á–∏—Å—Ç–∏—Ç—å {i}",
                    callback_data=f"remove_from_cart_{item['cart_item_id']}"
                )
            ])

        buttons.append([
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back_main"
            )
        ])

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            text=cart_text,
            reply_markup=markup,
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)
        await callback.answer()